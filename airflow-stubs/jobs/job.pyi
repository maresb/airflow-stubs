import airflow.utils.log.logging_mixin
import airflow.utils.timezone as timezone
import functools
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.api_internal.internal_api_call import internal_api_call as internal_api_call
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException
from airflow.executors.executor_loader import ExecutorLoader as ExecutorLoader
from airflow.listeners.listener import get_listener_manager as get_listener_manager
from airflow.serialization.pydantic.job import JobPydantic as JobPydantic
from airflow.stats import Stats as Stats
from airflow.utils.helpers import convert_camel_to_snake as convert_camel_to_snake
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.net import get_hostname as get_hostname
from airflow.utils.platform import getuser as getuser
from airflow.utils.session import provide_session as provide_session
from airflow.utils.sqlalchemy import UtcDateTime as UtcDateTime
from airflow.utils.state import JobState as JobState
from typing import Callable, ClassVar, NoReturn

TYPE_CHECKING: bool
ID_LEN: int
NEW_SESSION: None

class Job(sqlalchemy.orm.decl_api.Base, airflow.utils.log.logging_mixin.LoggingMixin):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    executor: ClassVar[functools.cached_property] = ...
    heartrate: ClassVar[functools.cached_property] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    id: Incomplete
    dag_id: Incomplete
    state: Incomplete
    job_type: Incomplete
    start_date: Incomplete
    end_date: Incomplete
    latest_heartbeat: Incomplete
    executor_class: Incomplete
    hostname: Incomplete
    unixname: Incomplete
    task_instances_enqueued: Incomplete
    dag_runs: Incomplete
    def __init__(self, executor: Incomplete | None = ..., heartrate: Incomplete | None = ..., **kwargs) -> None: ...
    def is_alive(self, grace_multiplier: float = ...) -> bool: ...
    def kill(self, *args, **kwargs) -> NoReturn: ...
    def on_kill(self): ...
    def heartbeat(self, *args, **kwargs) -> None: ...
    def prepare_for_execution(self, *args, **kwargs): ...
    def complete_execution(self, *args, **kwargs): ...
    def most_recent_job(self, *args, **kwargs) -> Job | JobPydantic | None: ...
def most_recent_job(*args, **kwargs) -> Job | JobPydantic | None: ...
def run_job(*args, **kwargs) -> int | None: ...
def execute_job(job: Job, execute_callable: Callable[[], int | None]) -> int | None: ...
def perform_heartbeat(job: Job, heartbeat_callback: Callable[[Session], None], only_if_necessary: bool) -> None: ...
