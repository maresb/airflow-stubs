from _typeshed import Incomplete
from airflow.executors.base_executor import BaseExecutor as BaseExecutor
from airflow.models.taskinstance import TaskInstance as TaskInstance
from airflow.models.taskinstancekey import TaskInstanceKey as TaskInstanceKey
from airflow.utils.state import TaskInstanceState as TaskInstanceState
from typing import Any

class DebugExecutor(BaseExecutor):
    is_single_threaded: bool
    is_production: bool
    change_sensor_mode_to_reschedule: bool
    tasks_to_run: list[TaskInstance]
    tasks_params: dict[TaskInstanceKey, dict[str, Any]]
    fail_fast: Incomplete
    def __init__(self) -> None: ...
    def execute_async(self, *args, **kwargs) -> None: ...
    def sync(self) -> None: ...
    def queue_task_instance(self, task_instance: TaskInstance, mark_success: bool = False, pickle_id: int | None = None, ignore_all_deps: bool = False, ignore_depends_on_past: bool = False, wait_for_past_depends_before_skipping: bool = False, ignore_task_deps: bool = False, ignore_ti_state: bool = False, pool: str | None = None, cfg_path: str | None = None) -> None: ...
    def trigger_tasks(self, open_slots: int) -> None: ...
    def end(self) -> None: ...
    def terminate(self) -> None: ...
