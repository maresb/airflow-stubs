import airflow.executors.base_executor
import threading
from _typeshed import Incomplete
from airflow.executors.base_executor import BaseExecutor as BaseExecutor
from airflow.utils.state import TaskInstanceState as TaskInstanceState
from typing import ClassVar

TYPE_CHECKING: bool

class DebugExecutor(airflow.executors.base_executor.BaseExecutor):
    _terminated: ClassVar[threading.Event] = ...
    is_single_threaded: ClassVar[bool] = ...
    is_production: ClassVar[bool] = ...
    change_sensor_mode_to_reschedule: ClassVar[bool] = ...
    def __init__(self) -> None: ...
    def execute_async(self, *args, **kwargs) -> None: ...
    def sync(self) -> None: ...
    def queue_task_instance(self, task_instance: TaskInstance, mark_success: bool = ..., pickle_id: int | None = ..., ignore_all_deps: bool = ..., ignore_depends_on_past: bool = ..., wait_for_past_depends_before_skipping: bool = ..., ignore_task_deps: bool = ..., ignore_ti_state: bool = ..., pool: str | None = ..., cfg_path: str | None = ...) -> None: ...
    def trigger_tasks(self, open_slots: int) -> None: ...
    def end(self) -> None: ...
    def terminate(self) -> None: ...
    def change_state(self, key: TaskInstanceKey, state: TaskInstanceState, info: Incomplete | None = ...) -> None: ...
