import airflow.settings as settings
import importlib_metadata
from airflow.utils.entry_points import entry_points_with_dist as entry_points_with_dist
from airflow.utils.file import find_path_from_directory as find_path_from_directory
from airflow.utils.module_loading import import_string as import_string, qualname as qualname
from typing import Any, ClassVar, Iterable

TYPE_CHECKING: bool
import_errors: dict
plugins: None
loaded_plugins: set
registered_hooks: None
macros_modules: None
executors_modules: None
admin_views: None
flask_blueprints: None
menu_links: None
flask_appbuilder_views: None
flask_appbuilder_menu_links: None
global_operator_extra_links: None
operator_extra_links: None
registered_operator_link_classes: None
registered_ti_dep_classes: None
timetable_classes: None
PLUGINS_ATTRIBUTES_TO_DUMP: set

class AirflowPluginSource:
    def __html__(self): ...

class PluginsDirectorySource(AirflowPluginSource):
    def __init__(self, path) -> None: ...
    def __html__(self): ...

class EntryPointSource(AirflowPluginSource):
    def __init__(self, entrypoint: importlib_metadata.EntryPoint, dist: importlib_metadata.Distribution) -> None: ...
    def __html__(self): ...

class AirflowPluginException(Exception): ...

class AirflowPlugin:
    name: ClassVar[None] = ...
    source: ClassVar[None] = ...
    hooks: ClassVar[list] = ...
    executors: ClassVar[list] = ...
    macros: ClassVar[list] = ...
    admin_views: ClassVar[list] = ...
    flask_blueprints: ClassVar[list] = ...
    menu_links: ClassVar[list] = ...
    appbuilder_views: ClassVar[list] = ...
    appbuilder_menu_items: ClassVar[list] = ...
    global_operator_extra_links: ClassVar[list] = ...
    operator_extra_links: ClassVar[list] = ...
    ti_deps: ClassVar[list] = ...
    timetables: ClassVar[list] = ...
    listeners: ClassVar[list] = ...
    @classmethod
    def validate(cls): ...
    @classmethod
    def on_load(cls, *args, **kwargs): ...
def is_valid_plugin(plugin_obj): ...
def register_plugin(plugin_instance): ...
def load_entrypoint_plugins(): ...
def load_plugins_from_plugin_directory(): ...
def load_providers_plugins(): ...
def make_module(name: str, objects: list[Any]): ...
def ensure_plugins_loaded(): ...
def initialize_web_ui_plugins(): ...
def initialize_ti_deps_plugins(): ...
def initialize_extra_operators_links_plugins(): ...
def initialize_timetables_plugins(): ...
def integrate_executor_plugins() -> None: ...
def integrate_macros_plugins() -> None: ...
def integrate_listener_plugins(listener_manager: ListenerManager) -> None: ...
def get_plugin_info(attrs_to_dump: Iterable[str] | None = ...) -> list[dict[str, Any]]: ...
