import airflow.triggers.base
import functools
import typing
from airflow.models.dagrun import DagRun as DagRun
from airflow.models.taskinstance import TaskInstance as TaskInstance
from airflow.triggers.base import BaseTrigger as BaseTrigger, TriggerEvent as TriggerEvent
from airflow.utils.session import provide_session as provide_session
from airflow.utils.state import TaskInstanceState as TaskInstanceState
from airflow.utils.timezone import utcnow as utcnow
from typing import ClassVar

NEW_SESSION: None

class TaskStateTrigger(airflow.triggers.base.BaseTrigger):
    count_running_dags: ClassVar[functools.partial] = ...
    count_tasks: ClassVar[functools.partial] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, dag_id: str, execution_dates: list[datetime], trigger_start_time: datetime, states: list[str] | None = ..., task_id: str | None = ..., poll_interval: float = ...) -> None: ...
    def serialize(self) -> tuple[str, dict[str, typing.Any]]: ...
    def run(self) -> typing.AsyncIterator[TriggerEvent]: ...

class DagStateTrigger(airflow.triggers.base.BaseTrigger):
    count_dags: ClassVar[functools.partial] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, dag_id: str, states: list[DagRunState], execution_dates: list[datetime], poll_interval: float = ...) -> None: ...
    def serialize(self) -> tuple[str, dict[str, typing.Any]]: ...
    def run(self) -> typing.AsyncIterator[TriggerEvent]: ...
