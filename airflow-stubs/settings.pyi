import airflow.executors.executor_constants as executor_constants
import airflow.policies as policies
import pluggy
from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.logging_config import configure_logging as configure_logging
from airflow.utils.orm_event_handlers import setup_event_handlers as setup_event_handlers
from airflow.utils.state import State as State
from airflow.utils.timezone import local_timezone as local_timezone, parse_timezone as parse_timezone

TYPE_CHECKING: bool
AIRFLOW_HOME: str
WEBSERVER_CONFIG: str
tz: str
HEADER: str
LOGGING_LEVEL: int
GUNICORN_WORKER_READY_PREFIX: str
LOG_FORMAT: str
SIMPLE_LOG_FORMAT: str
SQL_ALCHEMY_CONN: str
PLUGINS_FOLDER: str
LOGGING_CLASS_PATH: str
DONOT_MODIFY_HANDLERS: bool
DAGS_FOLDER: str
STATE_COLORS: dict
def custom_show_warning(message, category, filename, lineno, file: Incomplete | None = ..., line: Incomplete | None = ...): ...
def replace_showwarning(replacement): ...
def task_policy(task): ...
def dag_policy(dag): ...
def task_instance_mutation_hook(task_instance): ...
def pod_mutation_hook(pod): ...
def get_airflow_context_vars(context): ...
def get_dagbag_import_timeout(dag_file_path: str): ...
def configure_policy_plugin_manager(): ...
def load_policy_plugins(pm: pluggy.PluginManager): ...
def configure_vars(): ...

class SkipDBTestsSession:
    def __init__(self) -> None: ...
    def remove(self, *args, **kwargs): ...
def configure_orm(disable_connection_pool: bool = ..., pool_class: Incomplete | None = ...): ...

DEFAULT_ENGINE_ARGS: dict
def prepare_engine_args(disable_connection_pool: bool = ..., pool_class: Incomplete | None = ...): ...
def dispose_orm(): ...
def reconfigure_orm(disable_connection_pool: bool = ..., pool_class: Incomplete | None = ...): ...
def configure_adapters(): ...
def validate_session(): ...
def configure_action_logging() -> None: ...
def prepare_syspath(): ...
def get_session_lifetime_config(): ...
def import_local_settings(): ...
def initialize(): ...

KILOBYTE: int
MEGABYTE: int
WEB_COLORS: dict
MIN_SERIALIZED_DAG_UPDATE_INTERVAL: int
COMPRESS_SERIALIZED_DAGS: bool
MIN_SERIALIZED_DAG_FETCH_INTERVAL: int
CAN_FORK: bool
EXECUTE_TASKS_NEW_PYTHON_INTERPRETER: bool
ALLOW_FUTURE_EXEC_DATES: bool
CHECK_SLAS: bool
USE_JOB_SCHEDULE: bool
LAZY_LOAD_PLUGINS: bool
LAZY_LOAD_PROVIDERS: bool
IS_K8S_OR_K8SCELERY_EXECUTOR: bool
IS_EXECUTOR_CONTAINER: bool
IS_K8S_EXECUTOR_POD: bool
HIDE_SENSITIVE_VAR_CONN_FIELDS: bool
MASK_SECRETS_IN_LOGS: bool
DASHBOARD_UIALERTS: list
AIRFLOW_MOVED_TABLE_PREFIX: str
DAEMON_UMASK: str
