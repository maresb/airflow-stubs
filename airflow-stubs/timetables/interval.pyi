import abc
import datetime
from airflow.exceptions import AirflowTimetableInvalid as AirflowTimetableInvalid
from airflow.timetables._cron import CronMixin as CronMixin
from airflow.timetables.base import DagRunInfo as DagRunInfo, DataInterval as DataInterval, TimeRestriction as TimeRestriction, Timetable as Timetable
from airflow.utils.timezone import coerce_datetime as coerce_datetime, convert_to_utc as convert_to_utc, utcnow as utcnow
from dateutil.relativedelta import relativedelta
from pendulum import DateTime
from typing import Any

Delta = datetime.timedelta | relativedelta

class _DataIntervalTimetable(Timetable, metaclass=abc.ABCMeta):
    def next_dagrun_info(self, *, last_automated_data_interval: DataInterval | None, restriction: TimeRestriction) -> DagRunInfo | None: ...

class CronDataIntervalTimetable(CronMixin, _DataIntervalTimetable):
    @classmethod
    def deserialize(cls, data: dict[str, Any]) -> Timetable: ...
    def serialize(self) -> dict[str, Any]: ...
    def infer_manual_data_interval(self, *, run_after: DateTime) -> DataInterval: ...

class DeltaDataIntervalTimetable(_DataIntervalTimetable):
    def __init__(self, delta: Delta) -> None: ...
    @classmethod
    def deserialize(cls, data: dict[str, Any]) -> Timetable: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def summary(self) -> str: ...
    def serialize(self) -> dict[str, Any]: ...
    def validate(self) -> None: ...
    def infer_manual_data_interval(self, run_after: DateTime) -> DataInterval: ...
