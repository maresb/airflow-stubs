import airflow.timetables.base
import airflow.utils.timezone as timezone
from airflow.timetables.base import DagRunInfo as DagRunInfo, DataInterval as DataInterval, Timetable as Timetable
from typing import ClassVar, Iterable

TYPE_CHECKING: bool

class EventsTimetable(airflow.timetables.base.Timetable):
    __parameters__: ClassVar[tuple] = ...
    _is_protocol: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, event_dates: Iterable[DateTime], restrict_to_events: bool = ..., presorted: bool = ..., description: str | None = ...) -> None: ...
    def next_dagrun_info(self) -> DagRunInfo | None: ...
    def infer_manual_data_interval(self) -> DataInterval: ...
    def serialize(self): ...
    @classmethod
    def deserialize(cls, data) -> Timetable: ...
    def __subclasshook__(self, other): ...
    @property
    def summary(self): ...
