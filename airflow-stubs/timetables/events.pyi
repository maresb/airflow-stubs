from _typeshed import Incomplete
from airflow.timetables.base import DagRunInfo as DagRunInfo, DataInterval as DataInterval, TimeRestriction as TimeRestriction, Timetable as Timetable
from airflow.utils import timezone as timezone
from pendulum import DateTime as DateTime
from typing import Iterable

class EventsTimetable(Timetable):
    event_dates: Incomplete
    restrict_to_events: Incomplete
    description: Incomplete
    def __init__(self, event_dates: Iterable[DateTime], restrict_to_events: bool = False, presorted: bool = False, description: str | None = None) -> None: ...
    @property
    def summary(self) -> str: ...
    def next_dagrun_info(self, *, last_automated_data_interval: DataInterval | None, restriction: TimeRestriction) -> DagRunInfo | None: ...
    def infer_manual_data_interval(self, *, run_after: DateTime) -> DataInterval: ...
    def serialize(self): ...
    @classmethod
    def deserialize(cls, data) -> Timetable: ...
