import airflow.models.errors as errors
import airflow.settings as settings
import airflow.utils.log.logging_mixin
import airflow.utils.mixins
import airflow.utils.timezone as timezone
import logging
from airflow.api_internal.internal_api_call import internal_api_call as internal_api_call
from airflow.callbacks.callback_requests import DagCallbackRequest as DagCallbackRequest, SlaCallbackRequest as SlaCallbackRequest, TaskCallbackRequest as TaskCallbackRequest
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException, TaskNotFound as TaskNotFound
from airflow.models.dag import DAG as DAG, DagModel as DagModel
from airflow.models.dagbag import DagBag as DagBag
from airflow.models.dagrun import DR as DR
from airflow.models.dagwarning import DagWarning as DagWarning, DagWarningType as DagWarningType
from airflow.models.serialized_dag import SerializedDagModel as SerializedDagModel
from airflow.models.slamiss import SlaMiss as SlaMiss
from airflow.models.taskinstance import TI as TI, TaskInstance as TaskInstance
from airflow.stats import Stats as Stats
from airflow.utils.email import get_email_address_list as get_email_address_list, send_email as send_email
from airflow.utils.file import iter_airflow_imports as iter_airflow_imports, might_contain_dag as might_contain_dag
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin, StreamLogWriter as StreamLogWriter, set_context as set_context
from airflow.utils.mixins import MultiprocessingStartMethodMixin as MultiprocessingStartMethodMixin
from airflow.utils.session import provide_session as provide_session
from airflow.utils.state import TaskInstanceState as TaskInstanceState
from typing import ClassVar, Iterable

TYPE_CHECKING: bool
NEW_SESSION: None

class DagFileProcessorProcess(airflow.utils.log.logging_mixin.LoggingMixin, airflow.utils.mixins.MultiprocessingStartMethodMixin):
    class_creation_counter: ClassVar[int] = ...
    def __init__(self, file_path: str, pickle_dags: bool, dag_ids: list[str] | None, dag_directory: str, callback_requests: list[CallbackRequest]) -> None: ...
    def start(self) -> None: ...
    def kill(self) -> None: ...
    def terminate(self, sigkill: bool = ...) -> None: ...
    def import_modules(self, file_path: str | Iterable[str]): ...
    @property
    def file_path(self): ...
    @property
    def pid(self): ...
    @property
    def exit_code(self): ...
    @property
    def done(self): ...
    @property
    def result(self): ...
    @property
    def start_time(self): ...
    @property
    def waitable_handle(self): ...

class DagFileProcessor(airflow.utils.log.logging_mixin.LoggingMixin):
    UNIT_TEST_MODE: ClassVar[bool] = ...
    def __init__(self, dag_ids: list[str] | None, dag_directory: str, log: logging.Logger) -> None: ...
    @classmethod
    def manage_slas(cls, *args, **kwargs) -> None: ...
    @staticmethod
    def update_import_errors(*args, **kwargs) -> None: ...
    def update_dag_warnings(self) -> None: ...
    def execute_callbacks(self, *args, **kwargs) -> None: ...
    def execute_callbacks_without_dag(self, callback_requests: list[CallbackRequest], session: Session) -> None: ...
    def process_file(self, *args, **kwargs) -> tuple[int, int]: ...
    @staticmethod
    def save_dag_to_db(*args, **kwargs): ...
