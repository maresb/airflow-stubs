import airflow.utils.log.logging_mixin
import typing
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from typing import Any, ClassVar

TYPE_CHECKING: bool

class BaseHook(airflow.utils.log.logging_mixin.LoggingMixin):
    def __init__(self, logger_name: str | None = ...) -> None: ...
    @classmethod
    def get_connections(cls, conn_id: str) -> list[Connection]: ...
    @classmethod
    def get_connection(cls, conn_id: str) -> Connection: ...
    @classmethod
    def get_hook(cls, conn_id: str) -> BaseHook: ...
    def get_conn(self) -> Any: ...
    @classmethod
    def get_connection_form_widgets(cls) -> dict[str, Any]: ...
    @classmethod
    def get_ui_field_behaviour(cls) -> dict[str, Any]: ...

class DiscoverableHook(typing.Protocol):
    __parameters__: ClassVar[tuple] = ...
    _is_protocol: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    @staticmethod
    def get_connection_form_widgets() -> dict[str, Any]: ...
    @staticmethod
    def get_ui_field_behaviour() -> dict[str, Any]: ...
    def __subclasshook__(self, other): ...
    def __init__(self, *args, **kwargs) -> None: ...
