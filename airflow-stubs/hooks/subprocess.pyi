import airflow.hooks.base
from _typeshed import Incomplete
from airflow.hooks.base import BaseHook as BaseHook
from typing import ClassVar

PIPE: int
STDOUT: int

class SubprocessResult(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    exit_code: Incomplete
    output: Incomplete
    def __init__(self, _cls, exit_code, output) -> None: ...
    def __getnewargs__(self): ...

class SubprocessHook(airflow.hooks.base.BaseHook):
    def __init__(self, **kwargs) -> None: ...
    def run_command(self, command: list[str], env: dict[str, str] | None = ..., output_encoding: str = ..., cwd: str | None = ...) -> SubprocessResult: ...
    def send_sigterm(self): ...
