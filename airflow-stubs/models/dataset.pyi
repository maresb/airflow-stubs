import airflow.utils.timezone as timezone
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.datasets import Dataset as Dataset
from airflow.models.base import StringID as StringID
from airflow.utils.sqlalchemy import UtcDateTime as UtcDateTime
from typing import ClassVar

class DatasetModel(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    id: Incomplete
    uri: Incomplete
    extra: Incomplete
    created_at: Incomplete
    updated_at: Incomplete
    is_orphaned: Incomplete
    consuming_dags: Incomplete
    producing_tasks: Incomplete
    @classmethod
    def from_public(cls, obj: Dataset) -> DatasetModel: ...
    def __init__(self, uri, **kwargs) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...

class DagScheduleDatasetReference(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    dataset_id: Incomplete
    dag_id: Incomplete
    created_at: Incomplete
    updated_at: Incomplete
    dataset: Incomplete
    queue_records: Incomplete
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, **kwargs) -> None: ...

class TaskOutletDatasetReference(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    dataset_id: Incomplete
    dag_id: Incomplete
    task_id: Incomplete
    created_at: Incomplete
    updated_at: Incomplete
    dataset: Incomplete
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, **kwargs) -> None: ...

class DatasetDagRunQueue(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    dataset_id: Incomplete
    target_dag_id: Incomplete
    created_at: Incomplete
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, **kwargs) -> None: ...

class DatasetEvent(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    id: Incomplete
    dataset_id: Incomplete
    extra: Incomplete
    source_task_id: Incomplete
    source_dag_id: Incomplete
    source_run_id: Incomplete
    source_map_index: Incomplete
    timestamp: Incomplete
    created_dagruns: Incomplete
    source_task_instance: Incomplete
    source_dag_run: Incomplete
    dataset: Incomplete
    def __init__(self, **kwargs) -> None: ...
    @property
    def uri(self): ...
