import airflow.utils.log.logging_mixin
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.configuration import ensure_secrets_loaded as ensure_secrets_loaded
from airflow.exceptions import AirflowException as AirflowException, AirflowNotFoundException as AirflowNotFoundException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models.crypto import get_fernet as get_fernet
from airflow.secrets.cache import SecretCache as SecretCache
from airflow.utils.helpers import prune_dict as prune_dict
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.log.secrets_masker import mask_secret as mask_secret
from airflow.utils.module_loading import import_string as import_string
from typing import Any, ClassVar

ID_LEN: int
CONN_ID_MAX_LEN: int
def parse_netloc_to_hostname(*args, **kwargs): ...
def sanitize_conn_id(conn_id: str | None, max_length: int = ...) -> str | None: ...

class Connection(sqlalchemy.orm.decl_api.Base, airflow.utils.log.logging_mixin.LoggingMixin):
    EXTRA_KEY: ClassVar[str] = ...
    __tablename__: ClassVar[str] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    id: Incomplete
    conn_id: Incomplete
    conn_type: Incomplete
    description: Incomplete
    host: Incomplete
    schema: Incomplete
    login: Incomplete
    port: Incomplete
    is_encrypted: Incomplete
    is_extra_encrypted: Incomplete
    password: Incomplete
    extra: Incomplete
    def __init__(self, conn_id: Incomplete | None = ..., conn_type: Incomplete | None = ..., description: Incomplete | None = ..., host: Incomplete | None = ..., login: Incomplete | None = ..., password: Incomplete | None = ..., schema: Incomplete | None = ..., port: Incomplete | None = ..., extra: Incomplete | None = ..., uri: Incomplete | None = ...) -> None: ...
    def on_db_load(self): ...
    def parse_from_uri(self, **uri): ...
    def get_uri(self) -> str: ...
    def get_password(self) -> str | None: ...
    def set_password(self, value: str | None): ...
    def get_extra(self) -> str: ...
    def set_extra(self, value: str): ...
    def rotate_fernet_key(self): ...
    def get_hook(self): ...
    def log_info(self): ...
    def debug_info(self): ...
    def test_connection(self): ...
    @classmethod
    def get_connection_from_secrets(cls, conn_id: str) -> Connection: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_json(cls, value, conn_id: Incomplete | None = ...) -> Connection: ...
    def as_json(self) -> str: ...
    @property
    def extra_dejson(self): ...
