from _typeshed import Incomplete
from airflow.configuration import ensure_secrets_loaded as ensure_secrets_loaded
from airflow.exceptions import AirflowException as AirflowException, AirflowNotFoundException as AirflowNotFoundException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models.base import Base as Base, ID_LEN as ID_LEN
from airflow.models.crypto import get_fernet as get_fernet
from airflow.secrets.cache import SecretCache as SecretCache
from airflow.utils.helpers import prune_dict as prune_dict
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.log.secrets_masker import mask_secret as mask_secret
from airflow.utils.module_loading import import_string as import_string
from typing import Any

log: Incomplete
RE_SANITIZE_CONN_ID: Incomplete
CONN_ID_MAX_LEN: int

def parse_netloc_to_hostname(*args, **kwargs): ...
def sanitize_conn_id(conn_id: str | None, max_length=...) -> str | None: ...

class Connection(Base, LoggingMixin):
    EXTRA_KEY: str
    __tablename__: str
    id: Incomplete
    conn_id: Incomplete
    conn_type: Incomplete
    description: Incomplete
    host: Incomplete
    schema: Incomplete
    login: Incomplete
    port: Incomplete
    is_encrypted: Incomplete
    is_extra_encrypted: Incomplete
    def __init__(self, conn_id: str | None = None, conn_type: str | None = None, description: str | None = None, host: str | None = None, login: str | None = None, password: str | None = None, schema: str | None = None, port: int | None = None, extra: str | dict | None = None, uri: str | None = None) -> None: ...
    def on_db_load(self) -> None: ...
    def parse_from_uri(self, **uri) -> None: ...
    def get_uri(self) -> str: ...
    def get_password(self) -> str | None: ...
    def set_password(self, value: str | None): ...
    def password(cls): ...
    def get_extra(self) -> str: ...
    def set_extra(self, value: str): ...
    def extra(cls): ...
    def rotate_fernet_key(self) -> None: ...
    def get_hook(self, *, hook_params: Incomplete | None = None): ...
    def log_info(self): ...
    def debug_info(self): ...
    def test_connection(self): ...
    def get_extra_dejson(self, nested: bool = False) -> dict: ...
    @property
    def extra_dejson(self) -> dict: ...
    @classmethod
    def get_connection_from_secrets(cls, conn_id: str) -> Connection: ...
    def to_dict(self, *, prune_empty: bool = False, validate: bool = True) -> dict[str, Any]: ...
    @classmethod
    def from_json(cls, value, conn_id: Incomplete | None = None) -> Connection: ...
    def as_json(self) -> str: ...
