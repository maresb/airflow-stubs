import airflow.models.taskmixin
import airflow.template.templater
import datetime
import functools
import jinja2
import types
from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException
from airflow.models.expandinput import NotFullyPopulated as NotFullyPopulated
from airflow.models.taskmixin import DAGNode as DAGNode, DependencyMixin as DependencyMixin
from airflow.template.templater import Templater as Templater
from airflow.utils.context import Context as Context
from airflow.utils.db import exists_query as exists_query
from airflow.utils.log.secrets_masker import redact as redact
from airflow.utils.session import provide_session as provide_session
from airflow.utils.setup_teardown import SetupTeardownContext as SetupTeardownContext
from airflow.utils.sqlalchemy import skip_locked as skip_locked, with_row_locks as with_row_locks
from airflow.utils.state import State as State, TaskInstanceState as TaskInstanceState
from airflow.utils.task_group import MappedTaskGroup as MappedTaskGroup
from airflow.utils.trigger_rule import DEFAULT_TRIGGER_RULE as DEFAULT_TRIGGER_RULE, TriggerRule as TriggerRule
from airflow.utils.types import ArgNotSet as ArgNotSet, NOTSET as NOTSET
from airflow.utils.weight_rule import DEFAULT_WEIGHT_RULE as DEFAULT_WEIGHT_RULE, WeightRule as WeightRule
from typing import Any, ClassVar as _ClassVar, Collection, Iterable, Iterator, Sequence

TYPE_CHECKING: bool
NEW_SESSION: None
DEFAULT_OWNER: str
DEFAULT_POOL_SLOTS: int
DEFAULT_PRIORITY_WEIGHT: int
DEFAULT_QUEUE: str
DEFAULT_IGNORE_FIRST_DEPENDS_ON_PAST: bool
DEFAULT_WAIT_FOR_PAST_DEPENDS_BEFORE_SKIPPING: bool
DEFAULT_RETRIES: int
DEFAULT_RETRY_DELAY: datetime.timedelta
MAX_RETRY_DELAY: int
DEFAULT_TASK_EXECUTION_TIMEOUT: None

class NotMapped(Exception): ...

class AbstractOperator(airflow.template.templater.Templater, airflow.models.taskmixin.DAGNode):
    _on_failure_fail_dagrun: _ClassVar[bool] = ...
    HIDE_ATTRS_FROM_UI: _ClassVar[frozenset] = ...
    operator_extra_link_dict: _ClassVar[functools.cached_property] = ...
    global_operator_extra_link_dict: _ClassVar[functools.cached_property] = ...
    extra_links: _ClassVar[functools.cached_property] = ...
    get_parse_time_mapped_ti_count: _ClassVar[functools._lru_cache_wrapper] = ...
    __abstractmethods__: _ClassVar[frozenset] = ...
    _abc_impl: _ClassVar[_abc_data] = ...
    is_setup: Incomplete
    is_teardown: Incomplete
    on_failure_fail_dagrun: Incomplete
    def get_dag(self) -> DAG | None: ...
    def as_setup(self): ...
    def as_teardown(self): ...
    def get_direct_relative_ids(self, upstream: bool = ...) -> set[str]: ...
    def get_flat_relative_ids(self) -> set[str]: ...
    def get_flat_relatives(self, upstream: bool = ...) -> Collection[Operator]: ...
    def get_upstreams_follow_setups(self) -> Iterable[Operator]: ...
    def get_upstreams_only_setups_and_teardowns(self) -> Iterable[Operator]: ...
    def get_upstreams_only_setups(self) -> Iterable[Operator]: ...
    def iter_mapped_dependants(self) -> Iterator[MappedOperator | MappedTaskGroup]: ...
    def iter_mapped_task_groups(self) -> Iterator[MappedTaskGroup]: ...
    def get_closest_mapped_task_group(self) -> MappedTaskGroup | None: ...
    def unmap(self, resolve: None | dict[str, Any] | tuple[Context, Session]) -> BaseOperator: ...
    def get_extra_links(self, ti: TaskInstance, link_name: str) -> str | None: ...
    def get_mapped_ti_count(self, run_id: str) -> int: ...
    def expand_mapped_task(self, run_id: str) -> tuple[Sequence[TaskInstance], int]: ...
    def render_template_fields(self, context: Context, jinja_env: jinja2.Environment | None = ...) -> None: ...
    def get_template_env(self, dag: DAG | None = ...) -> jinja2.Environment: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None): ...
    @property
    def task_type(self): ...
    @property
    def operator_name(self): ...
    @property
    def inherits_from_empty_operator(self): ...
    @property
    def dag_id(self): ...
    @property
    def node_id(self): ...
    @property
    def priority_weight_total(self): ...
