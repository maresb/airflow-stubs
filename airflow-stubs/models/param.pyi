from _typeshed import Incomplete
from airflow.exceptions import AirflowException as AirflowException, ParamValidationError as ParamValidationError, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models.dag import DAG as DAG
from airflow.models.dagrun import DagRun as DagRun
from airflow.models.operator import Operator as Operator
from airflow.serialization.pydantic.dag_run import DagRunPydantic as DagRunPydantic
from airflow.utils import timezone as timezone
from airflow.utils.context import Context as Context
from airflow.utils.mixins import ResolveMixin as ResolveMixin
from airflow.utils.types import ArgNotSet as ArgNotSet, NOTSET as NOTSET
from typing import Any, ClassVar, Iterable, MutableMapping

logger: Incomplete

class Param:
    __version__: ClassVar[int]
    CLASS_IDENTIFIER: str
    value: Incomplete
    description: Incomplete
    schema: Incomplete
    def __init__(self, default: Any = ..., description: str | None = None, **kwargs) -> None: ...
    def __copy__(self) -> Param: ...
    def resolve(self, value: Any = ..., suppress_exception: bool = False) -> Any: ...
    def dump(self) -> dict: ...
    @property
    def has_value(self) -> bool: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(data: dict[str, Any], version: int) -> Param: ...

class ParamsDict(MutableMapping[str, Any]):
    __version__: ClassVar[int]
    suppress_exception: Incomplete
    def __init__(self, dict_obj: MutableMapping | None = None, suppress_exception: bool = False) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __copy__(self) -> ParamsDict: ...
    def __deepcopy__(self, memo: dict[int, Any] | None) -> ParamsDict: ...
    def __contains__(self, o: object) -> bool: ...
    def __len__(self) -> int: ...
    def __delitem__(self, v: str) -> None: ...
    def __iter__(self): ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def get_param(self, key: str) -> Param: ...
    def items(self): ...
    def values(self): ...
    def update(self, *args, **kwargs) -> None: ...
    def dump(self) -> dict[str, Any]: ...
    def validate(self) -> dict[str, Any]: ...
    def serialize(self) -> dict[str, Any]: ...
    @staticmethod
    def deserialize(data: dict, version: int) -> ParamsDict: ...

class DagParam(ResolveMixin):
    def __init__(self, current_dag: DAG, name: str, default: Any = ...) -> None: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context, *, include_xcom: bool = True) -> Any: ...

def process_params(dag: DAG, task: Operator, dag_run: DagRun | DagRunPydantic | None, *, suppress_exception: bool) -> dict[str, Any]: ...
