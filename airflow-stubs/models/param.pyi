import airflow.utils.mixins
import airflow.utils.timezone as timezone
import collections.abc
import typing
from _typeshed import Incomplete
from airflow.exceptions import AirflowException as AirflowException, ParamValidationError as ParamValidationError, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.utils.mixins import ResolveMixin as ResolveMixin
from airflow.utils.types import ArgNotSet as ArgNotSet, NOTSET as NOTSET
from typing import Any, ClassVar as _ClassVar, Iterable, MutableMapping

TYPE_CHECKING: bool

class Param:
    __version__: _ClassVar[int] = ...
    CLASS_IDENTIFIER: _ClassVar[str] = ...
    __slotnames__: _ClassVar[list] = ...
    def __init__(self, default: Any = ..., description: str | None = ..., **kwargs) -> None: ...
    def __copy__(self) -> Param: ...
    def resolve(self, value: Any = ..., suppress_exception: bool = ...) -> Any: ...
    def dump(self) -> dict: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(data: dict[str, Any], version: int) -> Param: ...
    @property
    def has_value(self): ...

class ParamsDict(collections.abc.MutableMapping, typing.Generic):
    __version__: _ClassVar[int] = ...
    __orig_bases__: _ClassVar[tuple] = ...
    __parameters__: _ClassVar[tuple] = ...
    __abstractmethods__: _ClassVar[frozenset] = ...
    _abc_impl: _ClassVar[_abc_data] = ...
    suppress_exception: Incomplete
    def __init__(self, dict_obj: MutableMapping | None = ..., suppress_exception: bool = ...) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __copy__(self) -> ParamsDict: ...
    def __deepcopy__(self, memo: dict[int, Any] | None) -> ParamsDict: ...
    def __contains__(self, o: object) -> bool: ...
    def __len__(self) -> int: ...
    def __delitem__(self, v: str) -> None: ...
    def __iter__(self): ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def get_param(self, key: str) -> Param: ...
    def items(self): ...
    def values(self): ...
    def update(self, *args, **kwargs) -> None: ...
    def dump(self) -> dict[str, Any]: ...
    def validate(self) -> dict[str, Any]: ...
    def serialize(self) -> dict[str, Any]: ...
    @staticmethod
    def deserialize(data: dict, version: int) -> ParamsDict: ...

class DagParam(airflow.utils.mixins.ResolveMixin):
    def __init__(self, current_dag: DAG, name: str, default: Any = ...) -> None: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context) -> Any: ...
def process_params(dag: DAG, task: Operator, dag_run: DagRun | DagRunPydantic | None) -> dict[str, Any]: ...
