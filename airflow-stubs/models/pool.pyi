import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.exceptions import AirflowException as AirflowException, PoolNotFound as PoolNotFound
from airflow.utils.db import exists_query as exists_query
from airflow.utils.session import provide_session as provide_session
from airflow.utils.sqlalchemy import nowait as nowait, with_row_locks as with_row_locks
from airflow.utils.state import TaskInstanceState as TaskInstanceState
from typing import Any, ClassVar

TYPE_CHECKING: bool
EXECUTION_STATES: set
NEW_SESSION: None

class PoolStats(dict):
    __total__: ClassVar[bool] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class Pool(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    DEFAULT_POOL_NAME: ClassVar[str] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    id: Incomplete
    pool: Incomplete
    slots: Incomplete
    description: Incomplete
    include_deferred: Incomplete
    @staticmethod
    def get_pools(*args, **kwargs) -> list[Pool]: ...
    @staticmethod
    def get_pool(*args, **kwargs) -> Pool | None: ...
    @staticmethod
    def get_default_pool(*args, **kwargs) -> Pool | None: ...
    @staticmethod
    def is_default_pool(*args, **kwargs) -> bool: ...
    @staticmethod
    def create_or_update_pool(*args, **kwargs) -> Pool: ...
    @staticmethod
    def delete_pool(*args, **kwargs) -> Pool: ...
    @staticmethod
    def slots_stats(*args, **kwargs) -> dict[str, PoolStats]: ...
    def to_json(self) -> dict[str, Any]: ...
    def occupied_slots(self, *args, **kwargs) -> int: ...
    def get_occupied_states(self): ...
    def running_slots(self, *args, **kwargs) -> int: ...
    def queued_slots(self, *args, **kwargs) -> int: ...
    def scheduled_slots(self, *args, **kwargs) -> int: ...
    def deferred_slots(self, *args, **kwargs) -> int: ...
    def open_slots(self, *args, **kwargs) -> float: ...
    def __init__(self, **kwargs) -> None: ...
