import airflow.utils.timezone as timezone
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.exceptions import AirflowException as AirflowException, DagCodeNotFound as DagCodeNotFound
from airflow.utils.file import correct_maybe_zipped as correct_maybe_zipped, open_maybe_zipped as open_maybe_zipped
from airflow.utils.session import provide_session as provide_session
from airflow.utils.sqlalchemy import UtcDateTime as UtcDateTime
from typing import ClassVar

TYPE_CHECKING: bool
NEW_SESSION: None

class DagCode(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    fileloc_hash: Incomplete
    fileloc: Incomplete
    last_updated: Incomplete
    source_code: Incomplete
    def __init__(self, full_filepath, source_code: Incomplete | None = ...) -> None: ...
    def sync_to_db(self, *args, **kwargs) -> None: ...
    @classmethod
    def bulk_sync_to_db(cls, *args, **kwargs) -> None: ...
    @classmethod
    def remove_deleted_code(cls, *args, **kwargs) -> None: ...
    @classmethod
    def has_dag(cls, *args, **kwargs) -> bool: ...
    @classmethod
    def get_code_by_fileloc(cls, fileloc: str) -> str: ...
    @classmethod
    def code(cls, *args, **kwargs) -> str: ...
    @staticmethod
    def dag_fileloc_hash(full_filepath: str) -> int: ...
