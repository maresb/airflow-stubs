import airflow.utils.log.logging_mixin
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.api_internal.internal_api_call import internal_api_call as internal_api_call
from airflow.configuration import ensure_secrets_loaded as ensure_secrets_loaded
from airflow.models.crypto import get_fernet as get_fernet
from airflow.secrets.cache import SecretCache as SecretCache
from airflow.secrets.metastore import MetastoreBackend as MetastoreBackend
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.log.secrets_masker import mask_secret as mask_secret
from airflow.utils.session import provide_session as provide_session
from typing import Any, ClassVar

TYPE_CHECKING: bool
ID_LEN: int

class Variable(sqlalchemy.orm.decl_api.Base, airflow.utils.log.logging_mixin.LoggingMixin):
    __tablename__: ClassVar[str] = ...
    _Variable__NO_DEFAULT_SENTINEL: ClassVar[object] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    id: Incomplete
    key: Incomplete
    description: Incomplete
    is_encrypted: Incomplete
    val: Incomplete
    def __init__(self, key: Incomplete | None = ..., val: Incomplete | None = ..., description: Incomplete | None = ...) -> None: ...
    def on_db_load(self): ...
    def get_val(self): ...
    def set_val(self, value): ...
    @classmethod
    def setdefault(cls, key, default, description: Incomplete | None = ..., deserialize_json: bool = ...): ...
    @classmethod
    def get(cls, key: str, default_var: Any = ..., deserialize_json: bool = ...) -> Any: ...
    @staticmethod
    def set(*args, **kwargs) -> None: ...
    @staticmethod
    def update(*args, **kwargs) -> None: ...
    @staticmethod
    def delete(*args, **kwargs) -> int: ...
    def rotate_fernet_key(self): ...
    @staticmethod
    def check_for_write_conflict(key: str) -> None: ...
    @staticmethod
    def get_variable_from_secrets(key: str) -> str | None: ...
