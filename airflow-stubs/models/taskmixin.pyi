import abc
import pendulum
from abc import ABCMeta, abstractmethod
from airflow.exceptions import AirflowException as AirflowException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models.baseoperator import BaseOperator as BaseOperator
from airflow.models.dag import DAG as DAG
from airflow.models.operator import Operator as Operator
from airflow.serialization.enums import DagAttributeTypes as DagAttributeTypes
from airflow.utils.edgemodifier import EdgeModifier as EdgeModifier
from airflow.utils.task_group import TaskGroup as TaskGroup
from airflow.utils.types import ArgNotSet as ArgNotSet, NOTSET as NOTSET
from logging import Logger
from typing import Any, Iterable, Sequence

class DependencyMixin(metaclass=abc.ABCMeta):
    @property
    def roots(self) -> Sequence[DependencyMixin]: ...
    @property
    def leaves(self) -> Sequence[DependencyMixin]: ...
    @abstractmethod
    def set_upstream(self, other: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = None): ...
    @abstractmethod
    def set_downstream(self, other: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = None): ...
    def as_setup(self) -> DependencyMixin: ...
    def as_teardown(self, *, setups: BaseOperator | Iterable[BaseOperator] | ArgNotSet = ..., on_failure_fail_dagrun=...) -> DependencyMixin: ...
    def update_relative(self, other: DependencyMixin, upstream: bool = True, edge_modifier: EdgeModifier | None = None) -> None: ...
    def __lshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...
    def __rshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...
    def __rrshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...
    def __rlshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...

class TaskMixin(DependencyMixin, metaclass=abc.ABCMeta):
    def __init_subclass__(cls) -> None: ...

class DAGNode(DependencyMixin, metaclass=ABCMeta):
    dag: DAG | None
    task_group: TaskGroup | None
    @property
    @abstractmethod
    def node_id(self) -> str: ...
    @property
    def label(self) -> str | None: ...
    start_date: pendulum.DateTime | None
    end_date: pendulum.DateTime | None
    upstream_task_ids: set[str]
    downstream_task_ids: set[str]
    def has_dag(self) -> bool: ...
    @property
    def dag_id(self) -> str: ...
    @property
    def log(self) -> Logger: ...
    @property
    @abstractmethod
    def roots(self) -> Sequence[DAGNode]: ...
    @property
    @abstractmethod
    def leaves(self) -> Sequence[DAGNode]: ...
    def set_downstream(self, task_or_task_list: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = None) -> None: ...
    def set_upstream(self, task_or_task_list: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = None) -> None: ...
    @property
    def downstream_list(self) -> Iterable[Operator]: ...
    @property
    def upstream_list(self) -> Iterable[Operator]: ...
    def get_direct_relative_ids(self, upstream: bool = False) -> set[str]: ...
    def get_direct_relatives(self, upstream: bool = False) -> Iterable[DAGNode]: ...
    def serialize_for_task_group(self) -> tuple[DagAttributeTypes, Any]: ...
