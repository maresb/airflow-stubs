from airflow.exceptions import AirflowException as AirflowException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.utils.types import NOTSET as NOTSET
from typing import Any, ClassVar, Iterable, Sequence

TYPE_CHECKING: bool

class DependencyMixin:
    def set_upstream(self, other: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = ...): ...
    def set_downstream(self, other: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = ...): ...
    def as_setup(self) -> DependencyMixin: ...
    def as_teardown(self) -> DependencyMixin: ...
    def update_relative(self, other: DependencyMixin, upstream: bool = ..., edge_modifier: EdgeModifier | None = ...) -> None: ...
    def __lshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...
    def __rshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...
    def __rrshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...
    def __rlshift__(self, other: DependencyMixin | Sequence[DependencyMixin]): ...
    @property
    def roots(self): ...
    @property
    def leaves(self): ...

class TaskMixin(DependencyMixin):
    @classmethod
    def __init_subclass__(cls) -> None: ...

class DAGNode(DependencyMixin):
    dag: ClassVar[None] = ...
    task_group: ClassVar[None] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def has_dag(self) -> bool: ...
    def set_downstream(self, task_or_task_list: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = ...) -> None: ...
    def set_upstream(self, task_or_task_list: DependencyMixin | Sequence[DependencyMixin], edge_modifier: EdgeModifier | None = ...) -> None: ...
    def get_direct_relative_ids(self, upstream: bool = ...) -> set[str]: ...
    def get_direct_relatives(self, upstream: bool = ...) -> Iterable[DAGNode]: ...
    def serialize_for_task_group(self) -> tuple[DagAttributeTypes, Any]: ...
    @property
    def node_id(self): ...
    @property
    def label(self): ...
    @property
    def dag_id(self): ...
    @property
    def log(self): ...
    @property
    def roots(self): ...
    @property
    def leaves(self): ...
    @property
    def downstream_list(self): ...
    @property
    def upstream_list(self): ...
