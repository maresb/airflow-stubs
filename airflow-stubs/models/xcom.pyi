import airflow.settings as settings
import airflow.utils.log.logging_mixin
import airflow.utils.timezone as timezone
import collections.abc
import contextlib
import functools
import sqlalchemy.ext.associationproxy
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.api_internal.internal_api_call import internal_api_call as internal_api_call
from airflow.configuration import conf as conf
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.utils.helpers import exactly_one as exactly_one, is_container as is_container
from airflow.utils.json import XComDecoder as XComDecoder, XComEncoder as XComEncoder
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.session import provide_session as provide_session
from airflow.utils.sqlalchemy import UtcDateTime as UtcDateTime
from sqlalchemy.orm.query import Query
from typing import Any, ClassVar

TYPE_CHECKING: bool
COLLATION_ARGS: dict
ID_LEN: int
NEW_SESSION: None
MAX_XCOM_SIZE: int
XCOM_RETURN_KEY: str

class BaseXCom(sqlalchemy.orm.decl_api.Base, airflow.utils.log.logging_mixin.LoggingMixin):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    _AssociationProxy_dag_run_139659704649184_inst: ClassVar[sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance] = ...
    dag_run_id: Incomplete
    task_id: Incomplete
    map_index: Incomplete
    key: Incomplete
    dag_id: Incomplete
    run_id: Incomplete
    value: Incomplete
    timestamp: Incomplete
    dag_run: Incomplete
    execution_date: Incomplete
    def init_on_load(self): ...
    @classmethod
    def set(cls, *args, **kwargs) -> None: ...
    @staticmethod
    def get_value(*args, **kwargs) -> Any: ...
    @staticmethod
    def get_one(*args, **kwargs) -> Any | None: ...
    @staticmethod
    def get_many(*args, **kwargs) -> Query: ...
    @classmethod
    def delete(cls, *args, **kwargs) -> None: ...
    @staticmethod
    def clear(*args, **kwargs) -> None: ...
    @staticmethod
    def serialize_value(value: Any) -> Any: ...
    @staticmethod
    def deserialize_value(result: XCom) -> Any: ...
    def orm_deserialize_value(self) -> Any: ...
    def __init__(self, **kwargs) -> None: ...

class _LazyXComAccessIterator(collections.abc.Iterator):
    _it: ClassVar[functools.cached_property] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, cm: contextlib.AbstractContextManager[Query]) -> None: ...
    def __del__(self) -> None: ...
    def __iter__(self) -> collections.abc.Iterator: ...
    def __next__(self) -> Any: ...

class LazyXComAccess(collections.abc.Sequence):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __attrs_attrs__: ClassVar[LazyXComAccessAttributes] = ...
    __attrs_own_setattr__: ClassVar[bool] = ...
    @classmethod
    def build_from_xcom_query(cls, query: Query) -> LazyXComAccess: ...
    def __eq__(self, other: Any) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, key): ...
    def __init__(self, query: Query) -> None: ...
def resolve_xcom_backend() -> type[BaseXCom]: ...

class XCom(sqlalchemy.orm.decl_api.Base, airflow.utils.log.logging_mixin.LoggingMixin):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    _AssociationProxy_dag_run_139659704649184_inst: ClassVar[sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance] = ...
    dag_run_id: Incomplete
    task_id: Incomplete
    map_index: Incomplete
    key: Incomplete
    dag_id: Incomplete
    run_id: Incomplete
    value: Incomplete
    timestamp: Incomplete
    dag_run: Incomplete
    execution_date: Incomplete
    def init_on_load(self): ...
    @classmethod
    def set(cls, *args, **kwargs) -> None: ...
    @staticmethod
    def get_value(*args, **kwargs) -> Any: ...
    @staticmethod
    def get_one(*args, **kwargs) -> Any | None: ...
    @staticmethod
    def get_many(*args, **kwargs) -> Query: ...
    @classmethod
    def delete(cls, *args, **kwargs) -> None: ...
    @staticmethod
    def clear(*args, **kwargs) -> None: ...
    @staticmethod
    def serialize_value(value: Any) -> Any: ...
    @staticmethod
    def deserialize_value(result: XCom) -> Any: ...
    def orm_deserialize_value(self) -> Any: ...
    def __init__(self, **kwargs) -> None: ...
