import attr
from _typeshed import Incomplete
from airflow.models.operator import Operator as Operator
from airflow.models.xcom_arg import XComArg as XComArg
from airflow.serialization.serialized_objects import _ExpandInputRef
from airflow.typing_compat import TypeGuard as TypeGuard
from airflow.utils.context import Context as Context
from airflow.utils.mixins import ResolveMixin as ResolveMixin
from airflow.utils.session import NEW_SESSION as NEW_SESSION, provide_session as provide_session
from sqlalchemy.orm import Session as Session
from typing import Any, Iterable, Mapping, NamedTuple

ExpandInput: Incomplete
OperatorExpandArgument: Incomplete
OperatorExpandKwargsArgument: Incomplete

@attr.define(kw_only=True)
class MappedArgument(ResolveMixin):
    def get_task_map_length(self, run_id: str, *, session: Session) -> int | None: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context, *, include_xcom: bool = True, session: Session = ...) -> Any: ...

def is_mappable(v: Any) -> TypeGuard[OperatorExpandArgument]: ...

class NotFullyPopulated(RuntimeError):
    missing: Incomplete
    def __init__(self, missing: set[str]) -> None: ...

class DictOfListsExpandInput(NamedTuple):
    value: dict[str, OperatorExpandArgument]
    def get_parse_time_mapped_ti_count(self) -> int: ...
    def get_total_map_length(self, run_id: str, *, session: Session) -> int: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context, session: Session, *, include_xcom: bool = True) -> tuple[Mapping[str, Any], set[int]]: ...

class ListOfDictsExpandInput(NamedTuple):
    value: OperatorExpandKwargsArgument
    def get_parse_time_mapped_ti_count(self) -> int: ...
    def get_total_map_length(self, run_id: str, *, session: Session) -> int: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context, session: Session, *, include_xcom: bool = True) -> tuple[Mapping[str, Any], set[int]]: ...

EXPAND_INPUT_EMPTY: Incomplete

def get_map_type_key(expand_input: ExpandInput | _ExpandInputRef) -> str: ...
def create_expand_input(kind: str, value: Any) -> ExpandInput: ...
