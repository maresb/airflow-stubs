import airflow.utils.timezone as timezone
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.api_internal.internal_api_call import internal_api_call as internal_api_call
from airflow.exceptions import TaskNotFound as TaskNotFound
from airflow.models.dag import DagModel as DagModel
from airflow.models.dagcode import DagCode as DagCode
from airflow.models.dagrun import DagRun as DagRun
from airflow.serialization.serialized_objects import DagDependency as DagDependency, SerializedDAG as SerializedDAG
from airflow.utils.hashlib_wrapper import md5 as md5
from airflow.utils.session import provide_session as provide_session
from airflow.utils.sqlalchemy import UtcDateTime as UtcDateTime
from typing import ClassVar

TYPE_CHECKING: bool
ID_LEN: int
COMPRESS_SERIALIZED_DAGS: bool
MIN_SERIALIZED_DAG_UPDATE_INTERVAL: int
NEW_SESSION: None

class SerializedDagModel(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    load_op_links: ClassVar[bool] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    dag_id: Incomplete
    fileloc: Incomplete
    fileloc_hash: Incomplete
    last_updated: Incomplete
    dag_hash: Incomplete
    processor_subdir: Incomplete
    dag_runs: Incomplete
    dag_model: Incomplete
    def __init__(self, dag, processor_subdir: Incomplete | None = ...) -> None: ...
    @classmethod
    def write_dag(cls, *args, **kwargs) -> bool: ...
    @classmethod
    def read_all_dags(cls, *args, **kwargs) -> dict[str, SerializedDAG]: ...
    @classmethod
    def remove_dag(cls, *args, **kwargs) -> None: ...
    @classmethod
    def remove_deleted_dags(cls, *args, **kwargs) -> None: ...
    @classmethod
    def has_dag(cls, *args, **kwargs) -> bool: ...
    @classmethod
    def get_dag(cls, *args, **kwargs) -> SerializedDAG | None: ...
    @classmethod
    def get(cls, *args, **kwargs) -> SerializedDagModel | None: ...
    @staticmethod
    def bulk_sync_to_db(*args, **kwargs) -> None: ...
    @classmethod
    def get_last_updated_datetime(cls, *args, **kwargs) -> datetime | None: ...
    @classmethod
    def get_max_last_updated_datetime(cls, *args, **kwargs) -> datetime | None: ...
    @classmethod
    def get_latest_version_hash(cls, *args, **kwargs) -> str | None: ...
    @classmethod
    def get_latest_version_hash_and_updated_datetime(cls, dag_id: str) -> tuple[str, datetime] | None: ...
    @classmethod
    def get_dag_dependencies(cls, *args, **kwargs) -> dict[str, list[DagDependency]]: ...
    @staticmethod
    def get_serialized_dag(*args, **kwargs) -> Operator | None: ...
    @property
    def data(self): ...
    @property
    def dag(self): ...
