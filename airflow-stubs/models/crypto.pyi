import typing
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException
from typing import ClassVar

class FernetProtocol(typing.Protocol):
    __parameters__: ClassVar[tuple] = ...
    _is_protocol: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def decrypt(self, b): ...
    def encrypt(self, b): ...
    def __subclasshook__(self, other): ...
    def __init__(self, *args, **kwargs) -> None: ...

class NullFernet:
    is_encrypted: ClassVar[bool] = ...
    def decrypt(self, b): ...
    def encrypt(self, b): ...
def get_fernet(): ...
