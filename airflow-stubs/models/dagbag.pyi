import airflow.settings as settings
import airflow.utils.log.logging_mixin
import airflow.utils.timezone as timezone
from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowClusterPolicyError as AirflowClusterPolicyError, AirflowClusterPolicySkipDag as AirflowClusterPolicySkipDag, AirflowClusterPolicyViolation as AirflowClusterPolicyViolation, AirflowDagCycleException as AirflowDagCycleException, AirflowDagDuplicatedIdException as AirflowDagDuplicatedIdException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.stats import Stats as Stats
from airflow.utils.dag_cycle_tester import check_cycle as check_cycle
from airflow.utils.docs import get_docs_url as get_docs_url
from airflow.utils.file import correct_maybe_zipped as correct_maybe_zipped, get_unique_dag_module_name as get_unique_dag_module_name, list_py_file_paths as list_py_file_paths, might_contain_dag as might_contain_dag
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.retries import run_with_db_retries as run_with_db_retries
from airflow.utils.session import provide_session as provide_session
from airflow.utils.timeout import timeout as timeout
from airflow.utils.types import NOTSET as NOTSET
from datetime import timedelta
from pathlib import Path
from typing import ClassVar

TYPE_CHECKING: bool
MAX_DB_RETRIES: int
NEW_SESSION: None

class FileLoadStat(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    file: Incomplete
    duration: Incomplete
    dag_num: Incomplete
    task_num: Incomplete
    dags: Incomplete
    def __init__(self, _cls, file: str, duration: timedelta, dag_num: int, task_num: int, dags: str) -> None: ...
    def __getnewargs__(self): ...

class DagBag(airflow.utils.log.logging_mixin.LoggingMixin):
    def __init__(self, dag_folder: str | Path | None = ..., include_examples: bool | ArgNotSet = ..., safe_mode: bool | ArgNotSet = ..., read_dags_from_db: bool = ..., store_serialized_dags: bool | None = ..., load_op_links: bool = ..., collect_dags: bool = ...) -> None: ...
    def size(self) -> int: ...
    def get_dag(self, *args, **kwargs): ...
    def process_file(self, filepath, only_if_updated: bool = ..., safe_mode: bool = ...): ...
    def bag_dag(self, dag, root_dag): ...
    def collect_dags(self, dag_folder: str | Path | None = ..., only_if_updated: bool = ..., include_examples: bool = ..., safe_mode: bool = ...): ...
    def collect_dags_from_db(self): ...
    def dagbag_report(self): ...
    def sync_to_db(self, *args, **kwargs): ...
    @property
    def store_serialized_dags(self): ...
    @property
    def dag_ids(self): ...
