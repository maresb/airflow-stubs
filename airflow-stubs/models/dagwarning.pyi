import airflow.utils.timezone as timezone
import enum
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.api_internal.internal_api_call import internal_api_call as internal_api_call
from airflow.models.base import StringID as StringID
from airflow.utils.retries import retry_db_transaction as retry_db_transaction
from airflow.utils.session import provide_session as provide_session
from airflow.utils.sqlalchemy import UtcDateTime as UtcDateTime
from typing import ClassVar

TYPE_CHECKING: bool
NEW_SESSION: None

class DagWarning(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    dag_id: Incomplete
    warning_type: Incomplete
    message: Incomplete
    timestamp: Incomplete
    def __init__(self, dag_id, error_type, message, **kwargs) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    @classmethod
    def purge_inactive_dag_warnings(cls, *args, **kwargs) -> None: ...

class DagWarningType(str, enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[str]] = ...
    _value2member_map_: ClassVar[dict] = ...
    NONEXISTENT_POOL: ClassVar[DagWarningType] = ...
    def __format__(self, format_spec) -> str: ...
    @classmethod
    def __init__(cls, value) -> None: ...
