import enum
import sqlalchemy.orm.decl_api
import sqlalchemy.orm.instrumentation
import sqlalchemy.orm.mapper
import sqlalchemy.sql.schema
from _typeshed import Incomplete
from airflow.utils.sqlalchemy import ExtendedJSON as ExtendedJSON
from typing import ClassVar, Collection

TYPE_CHECKING: bool
COLLATION_ARGS: dict
ID_LEN: int

class TaskMapVariant(enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[object]] = ...
    _value2member_map_: ClassVar[dict] = ...
    DICT: ClassVar[TaskMapVariant] = ...
    LIST: ClassVar[TaskMapVariant] = ...
    @classmethod
    def __init__(cls, value) -> None: ...

class TaskMap(sqlalchemy.orm.decl_api.Base):
    __tablename__: ClassVar[str] = ...
    __table_args__: ClassVar[tuple] = ...
    _sa_class_manager: ClassVar[sqlalchemy.orm.instrumentation.ClassManager] = ...
    __table__: ClassVar[sqlalchemy.sql.schema.Table] = ...
    __mapper__: ClassVar[sqlalchemy.orm.mapper.Mapper] = ...
    dag_id: Incomplete
    task_id: Incomplete
    run_id: Incomplete
    map_index: Incomplete
    length: Incomplete
    keys: Incomplete
    def __init__(self, dag_id, task_id, run_id, map_index, length, keys) -> None: ...
    @classmethod
    def from_task_instance_xcom(cls, ti: TaskInstance | TaskInstancePydantic, value: Collection) -> TaskMap: ...
    @property
    def variant(self): ...
