import airflow.models.abstractoperator
import datetime
import functools
import jinja2
from _typeshed import Incomplete
from airflow.exceptions import AirflowException as AirflowException, UnmappableOperator as UnmappableOperator
from airflow.models.abstractoperator import AbstractOperator as AbstractOperator, NotMapped as NotMapped
from airflow.models.expandinput import DictOfListsExpandInput as DictOfListsExpandInput, ListOfDictsExpandInput as ListOfDictsExpandInput, is_mappable as is_mappable
from airflow.models.pool import Pool as Pool
from airflow.serialization.enums import DagAttributeTypes as DagAttributeTypes
from airflow.ti_deps.deps.mapped_task_expanded import MappedTaskIsExpanded as MappedTaskIsExpanded
from airflow.utils.context import context_update_for_unmapped as context_update_for_unmapped
from airflow.utils.helpers import is_container as is_container, prevent_duplicates as prevent_duplicates
from airflow.utils.task_instance_session import get_current_task_instance_session as get_current_task_instance_session
from airflow.utils.trigger_rule import DEFAULT_TRIGGER_RULE as DEFAULT_TRIGGER_RULE
from airflow.utils.types import NOTSET as NOTSET
from airflow.utils.weight_rule import DEFAULT_WEIGHT_RULE as DEFAULT_WEIGHT_RULE
from typing import Any, ClassVar as _ClassVar, Iterator, Mapping, ValidationSource

TYPE_CHECKING: bool
DEFAULT_IGNORE_FIRST_DEPENDS_ON_PAST: bool
DEFAULT_OWNER: str
DEFAULT_POOL_SLOTS: int
DEFAULT_PRIORITY_WEIGHT: int
DEFAULT_QUEUE: str
DEFAULT_RETRIES: int
DEFAULT_RETRY_DELAY: datetime.timedelta
DEFAULT_WAIT_FOR_PAST_DEPENDS_BEFORE_SKIPPING: bool
XCOM_RETURN_KEY: str
def validate_mapping_kwargs(op: type[BaseOperator], func: ValidationSource, value: dict[str, Any]) -> None: ...
def ensure_xcomarg_return_value(arg: Any) -> None: ...

class OperatorPartial:
    __attrs_attrs__: _ClassVar[OperatorPartialAttributes] = ...
    __attrs_own_setattr__: _ClassVar[bool] = ...
    kwargs: Incomplete
    operator_class: Incomplete
    params: Incomplete
    def __attrs_post_init__(self): ...
    def __del__(self) -> None: ...
    def expand(self, **mapped_kwargs: OperatorExpandArgument) -> MappedOperator: ...
    def expand_kwargs(self, kwargs: OperatorExpandKwargsArgument) -> MappedOperator: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __init__(self) -> None: ...

class MappedOperator(airflow.models.abstractoperator.AbstractOperator):
    HIDE_ATTRS_FROM_UI: _ClassVar[frozenset] = ...
    deps_for: _ClassVar[functools._lru_cache_wrapper] = ...
    get_parse_time_mapped_ti_count: _ClassVar[functools._lru_cache_wrapper] = ...
    __abstractmethods__: _ClassVar[frozenset] = ...
    _abc_impl: _ClassVar[_abc_data] = ...
    __attrs_attrs__: _ClassVar[MappedOperatorAttributes] = ...
    __attrs_own_setattr__: _ClassVar[bool] = ...
    trigger_rule: Incomplete
    is_setup: Incomplete
    is_teardown: Incomplete
    depends_on_past: Incomplete
    ignore_first_depends_on_past: Incomplete
    wait_for_past_depends_before_skipping: Incomplete
    wait_for_downstream: Incomplete
    retries: Incomplete
    queue: Incomplete
    pool: Incomplete
    pool_slots: Incomplete
    execution_timeout: Incomplete
    max_retry_delay: Incomplete
    retry_delay: Incomplete
    retry_exponential_backoff: Incomplete
    priority_weight: Incomplete
    weight_rule: Incomplete
    sla: Incomplete
    max_active_tis_per_dag: Incomplete
    max_active_tis_per_dagrun: Incomplete
    on_execute_callback: Incomplete
    on_failure_callback: Incomplete
    on_retry_callback: Incomplete
    on_success_callback: Incomplete
    inlets: Incomplete
    outlets: Incomplete
    dag: Incomplete
    deps: Incomplete
    downstream_task_ids: Incomplete
    end_date: Incomplete
    expand_input: Incomplete
    operator_class: Incomplete
    operator_extra_links: Incomplete
    params: Incomplete
    partial_kwargs: Incomplete
    start_date: Incomplete
    subdag: Incomplete
    supports_lineage: Incomplete
    task_group: Incomplete
    task_id: Incomplete
    template_ext: Incomplete
    template_fields: Incomplete
    template_fields_renderers: Incomplete
    ui_color: Incomplete
    ui_fgcolor: Incomplete
    upstream_task_ids: Incomplete
    def __hash__(self) -> int: ...
    def __attrs_post_init__(self): ...
    @classmethod
    def get_serialized_fields(cls, *args, **kwargs): ...
    def get_dag(self) -> DAG | None: ...
    def serialize_for_task_group(self) -> tuple[DagAttributeTypes, Any]: ...
    def unmap(self, resolve: None | Mapping[str, Any] | tuple[Context, Session]) -> BaseOperator: ...
    def prepare_for_execution(self) -> MappedOperator: ...
    def iter_mapped_dependencies(self) -> Iterator[Operator]: ...
    def get_mapped_ti_count(self, run_id: str) -> int: ...
    def render_template_fields(self, context: Context, jinja_env: jinja2.Environment | None = ...) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __init__(self) -> None: ...
    @property
    def task_type(self): ...
    @property
    def operator_name(self): ...
    @property
    def inherits_from_empty_operator(self): ...
    @property
    def roots(self): ...
    @property
    def leaves(self): ...
    @property
    def owner(self): ...
    @property
    def email(self): ...
    @property
    def resources(self): ...
    @property
    def run_as_user(self): ...
    @property
    def executor_config(self): ...
    @property
    def doc(self): ...
    @property
    def doc_md(self): ...
    @property
    def doc_json(self): ...
    @property
    def doc_yaml(self): ...
    @property
    def doc_rst(self): ...
    @property
    def output(self): ...
