import enum
from typing import ClassVar

class JobState(str, enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[str]] = ...
    _value2member_map_: ClassVar[dict] = ...
    RUNNING: ClassVar[JobState] = ...
    SUCCESS: ClassVar[JobState] = ...
    RESTARTING: ClassVar[JobState] = ...
    FAILED: ClassVar[JobState] = ...
    def __format__(self, format_spec) -> str: ...
    @classmethod
    def __init__(cls, value) -> None: ...

class TaskInstanceState(str, enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[str]] = ...
    _value2member_map_: ClassVar[dict] = ...
    REMOVED: ClassVar[TaskInstanceState] = ...
    SCHEDULED: ClassVar[TaskInstanceState] = ...
    QUEUED: ClassVar[TaskInstanceState] = ...
    RUNNING: ClassVar[TaskInstanceState] = ...
    SUCCESS: ClassVar[TaskInstanceState] = ...
    RESTARTING: ClassVar[TaskInstanceState] = ...
    FAILED: ClassVar[TaskInstanceState] = ...
    UP_FOR_RETRY: ClassVar[TaskInstanceState] = ...
    UP_FOR_RESCHEDULE: ClassVar[TaskInstanceState] = ...
    UPSTREAM_FAILED: ClassVar[TaskInstanceState] = ...
    SKIPPED: ClassVar[TaskInstanceState] = ...
    DEFERRED: ClassVar[TaskInstanceState] = ...
    SHUTDOWN: ClassVar[TaskInstanceState] = ...
    def __format__(self, format_spec) -> str: ...
    @classmethod
    def __init__(cls, value) -> None: ...

class DagRunState(str, enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[str]] = ...
    _value2member_map_: ClassVar[dict] = ...
    QUEUED: ClassVar[DagRunState] = ...
    RUNNING: ClassVar[DagRunState] = ...
    SUCCESS: ClassVar[DagRunState] = ...
    FAILED: ClassVar[DagRunState] = ...
    def __format__(self, format_spec) -> str: ...
    @classmethod
    def __init__(cls, value) -> None: ...

class State:
    SUCCESS: ClassVar[TaskInstanceState] = ...
    RUNNING: ClassVar[TaskInstanceState] = ...
    FAILED: ClassVar[TaskInstanceState] = ...
    NONE: ClassVar[None] = ...
    REMOVED: ClassVar[TaskInstanceState] = ...
    SCHEDULED: ClassVar[TaskInstanceState] = ...
    QUEUED: ClassVar[TaskInstanceState] = ...
    RESTARTING: ClassVar[TaskInstanceState] = ...
    UP_FOR_RETRY: ClassVar[TaskInstanceState] = ...
    UP_FOR_RESCHEDULE: ClassVar[TaskInstanceState] = ...
    UPSTREAM_FAILED: ClassVar[TaskInstanceState] = ...
    SKIPPED: ClassVar[TaskInstanceState] = ...
    DEFERRED: ClassVar[TaskInstanceState] = ...
    SHUTDOWN: ClassVar[TaskInstanceState] = ...
    finished_dr_states: ClassVar[frozenset] = ...
    unfinished_dr_states: ClassVar[frozenset] = ...
    task_states: ClassVar[tuple] = ...
    dag_states: ClassVar[tuple] = ...
    state_color: ClassVar[dict] = ...
    finished: ClassVar[frozenset] = ...
    unfinished: ClassVar[frozenset] = ...
    failed_states: ClassVar[frozenset] = ...
    success_states: ClassVar[frozenset] = ...
    terminating_states: ClassVar[frozenset] = ...
    adoptable_states: ClassVar[frozenset] = ...
    @classmethod
    def color(cls, state): ...
    @classmethod
    def color_fg(cls, state): ...
