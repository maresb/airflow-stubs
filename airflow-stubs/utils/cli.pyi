from _typeshed import Incomplete
from airflow import settings as settings
from airflow.api_internal.internal_api_call import InternalApiConfig as InternalApiConfig
from airflow.exceptions import AirflowException as AirflowException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models.dag import DAG as DAG
from airflow.utils import cli_action_loggers as cli_action_loggers, timezone as timezone
from airflow.utils.log.non_caching_file_handler import NonCachingFileHandler as NonCachingFileHandler
from airflow.utils.log.secrets_masker import should_hide_value_for_key as should_hide_value_for_key
from airflow.utils.platform import getuser as getuser, is_terminal_support_colors as is_terminal_support_colors
from airflow.utils.session import NEW_SESSION as NEW_SESSION, provide_session as provide_session
from sqlalchemy.orm import Session as Session
from typing import Callable, TypeVar

T = TypeVar('T', bound=Callable)
logger: Incomplete

def action_cli(func: Incomplete | None = None, check_db: bool = True): ...
def process_subdir(subdir: str | None): ...
def get_dag_by_file_location(dag_id: str): ...
def get_dag(subdir: str | None, dag_id: str, from_db: bool = False) -> DAG: ...
def get_dags(subdir: str | None, dag_id: str, use_regex: bool = False): ...
def get_dag_by_pickle(pickle_id: int, session: Session = ...) -> DAG: ...
def setup_locations(process, pid: Incomplete | None = None, stdout: Incomplete | None = None, stderr: Incomplete | None = None, log: Incomplete | None = None): ...
def setup_logging(filename): ...
def sigint_handler(sig, frame) -> None: ...
def sigquit_handler(sig, frame) -> None: ...

class ColorMode:
    ON: str
    OFF: str
    AUTO: str

def should_use_colors(args) -> bool: ...
def should_ignore_depends_on_past(args) -> bool: ...
def suppress_logs_and_warning(f: T) -> T: ...
