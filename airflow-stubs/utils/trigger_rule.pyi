import enum
from typing import ClassVar

class TriggerRule(str, enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[str]] = ...
    _value2member_map_: ClassVar[dict] = ...
    ALL_SUCCESS: ClassVar[TriggerRule] = ...
    ALL_FAILED: ClassVar[TriggerRule] = ...
    ALL_DONE: ClassVar[TriggerRule] = ...
    ALL_DONE_SETUP_SUCCESS: ClassVar[TriggerRule] = ...
    ONE_SUCCESS: ClassVar[TriggerRule] = ...
    ONE_FAILED: ClassVar[TriggerRule] = ...
    ONE_DONE: ClassVar[TriggerRule] = ...
    NONE_FAILED: ClassVar[TriggerRule] = ...
    NONE_FAILED_OR_SKIPPED: ClassVar[TriggerRule] = ...
    NONE_SKIPPED: ClassVar[TriggerRule] = ...
    DUMMY: ClassVar[TriggerRule] = ...
    ALWAYS: ClassVar[TriggerRule] = ...
    NONE_FAILED_MIN_ONE_SUCCESS: ClassVar[TriggerRule] = ...
    ALL_SKIPPED: ClassVar[TriggerRule] = ...
    @classmethod
    def is_valid(cls, trigger_rule: str) -> bool: ...
    @classmethod
    def all_triggers(cls) -> set[str]: ...
    def __format__(self, format_spec) -> str: ...
    @classmethod
    def __init__(cls, value) -> None: ...
