from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowConfigException as AirflowConfigException, AirflowException as AirflowException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from email.mime.multipart import MIMEMultipart
from typing import Any, Iterable

log: Incomplete

def send_email(to: list[str] | Iterable[str], subject: str, html_content: str, files: list[str] | None = None, dryrun: bool = False, cc: str | Iterable[str] | None = None, bcc: str | Iterable[str] | None = None, mime_subtype: str = 'mixed', mime_charset: str = 'utf-8', conn_id: str | None = None, custom_headers: dict[str, Any] | None = None, **kwargs) -> None: ...
def send_email_smtp(to: str | Iterable[str], subject: str, html_content: str, files: list[str] | None = None, dryrun: bool = False, cc: str | Iterable[str] | None = None, bcc: str | Iterable[str] | None = None, mime_subtype: str = 'mixed', mime_charset: str = 'utf-8', conn_id: str = 'smtp_default', from_email: str | None = None, custom_headers: dict[str, Any] | None = None, **kwargs) -> None: ...
def build_mime_message(mail_from: str | None, to: str | Iterable[str], subject: str, html_content: str, files: list[str] | None = None, cc: str | Iterable[str] | None = None, bcc: str | Iterable[str] | None = None, mime_subtype: str = 'mixed', mime_charset: str = 'utf-8', custom_headers: dict[str, Any] | None = None) -> tuple[MIMEMultipart, list[str]]: ...
def send_mime_email(e_from: str, e_to: str | list[str], mime_msg: MIMEMultipart, conn_id: str = 'smtp_default', dryrun: bool = False) -> None: ...
def get_email_address_list(addresses: str | Iterable[str]) -> list[str]: ...
