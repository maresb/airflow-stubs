import os
import zipfile
from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from pathlib import Path
from typing import Generator, NamedTuple, Pattern, Protocol, overload

log: Incomplete
MODIFIED_DAG_MODULE_NAME: str

class _IgnoreRule(Protocol):
    @staticmethod
    def compile(pattern: str, base_dir: Path, definition_file: Path) -> _IgnoreRule | None: ...
    @staticmethod
    def match(path: Path, rules: list[_IgnoreRule]) -> bool: ...

class _RegexpIgnoreRule(NamedTuple):
    pattern: Pattern
    base_dir: Path
    @staticmethod
    def compile(pattern: str, base_dir: Path, definition_file: Path) -> _IgnoreRule | None: ...
    @staticmethod
    def match(path: Path, rules: list[_IgnoreRule]) -> bool: ...

class _GlobIgnoreRule(NamedTuple):
    pattern: Pattern
    raw_pattern: str
    include: bool | None = ...
    relative_to: Path | None = ...
    @staticmethod
    def compile(pattern: str, _, definition_file: Path) -> _IgnoreRule | None: ...
    @staticmethod
    def match(path: Path, rules: list[_IgnoreRule]) -> bool: ...

def TemporaryDirectory(*args, **kwargs): ...
def mkdirs(path, mode) -> None: ...

ZIP_REGEX: Incomplete

@overload
def correct_maybe_zipped(fileloc: None) -> None: ...
@overload
def correct_maybe_zipped(fileloc: str | Path) -> str | Path: ...
def open_maybe_zipped(fileloc, mode: str = 'r'): ...
def find_path_from_directory(base_dir_path: str | os.PathLike[str], ignore_file_name: str, ignore_file_syntax: str = ...) -> Generator[str, None, None]: ...
def list_py_file_paths(directory: str | os.PathLike[str] | None, safe_mode: bool = ..., include_examples: bool | None = None) -> list[str]: ...
def find_dag_file_paths(directory: str | os.PathLike[str], safe_mode: bool) -> list[str]: ...

COMMENT_PATTERN: Incomplete

def might_contain_dag(file_path: str, safe_mode: bool, zip_file: zipfile.ZipFile | None = None) -> bool: ...
def might_contain_dag_via_default_heuristic(file_path: str, zip_file: zipfile.ZipFile | None = None) -> bool: ...
def iter_airflow_imports(file_path: str) -> Generator[str, None, None]: ...
def get_unique_dag_module_name(file_path: str) -> str: ...
