from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.models.taskinstance import TaskInstance as TaskInstance
from airflow.models.taskinstancekey import TaskInstanceKey as TaskInstanceKey
from airflow.utils.log.file_task_handler import FileTaskHandler as FileTaskHandler
from airflow.utils.session import create_session as create_session
from logging import Logger

logger: Incomplete

class TaskContextLogger:
    component_name: Incomplete
    task_handler: Incomplete
    enabled: Incomplete
    call_site_logger: Incomplete
    def __init__(self, component_name: str, call_site_logger: Logger | None = None) -> None: ...
    def critical(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
    def fatal(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
    def error(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
    def warn(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
    def warning(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
    def info(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
    def debug(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
    def notset(self, msg: str, *args, ti: TaskInstance | TaskInstanceKey): ...
