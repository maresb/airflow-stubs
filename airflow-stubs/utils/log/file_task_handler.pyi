import enum
import functools
import logging
from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.executors.executor_loader import ExecutorLoader as ExecutorLoader
from airflow.utils.context import Context as Context
from airflow.utils.helpers import parse_template_string as parse_template_string, render_template_to_string as render_template_to_string
from airflow.utils.log.logging_mixin import SetContextPropagate as SetContextPropagate
from airflow.utils.log.non_caching_file_handler import NonCachingFileHandler as NonCachingFileHandler
from airflow.utils.session import create_session as create_session
from airflow.utils.state import State as State, TaskInstanceState as TaskInstanceState
from typing import ClassVar

TYPE_CHECKING: bool

class LogType(str, enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[str]] = ...
    _value2member_map_: ClassVar[dict] = ...
    TRIGGER: ClassVar[LogType] = ...
    WORKER: ClassVar[LogType] = ...
    def __format__(self, format_spec) -> str: ...
    @classmethod
    def __init__(cls, value) -> None: ...

class FileTaskHandler(logging.Handler):
    trigger_should_wrap: ClassVar[bool] = ...
    inherits_from_empty_operator_log_message: ClassVar[str] = ...
    supports_task_context_logging: ClassVar[functools.cached_property] = ...
    _executor_get_task_log: ClassVar[functools.cached_property] = ...
    def __init__(self, base_log_folder: str, filename_template: str | None = ...) -> None: ...
    def set_context(self, ti: TaskInstance) -> None | SetContextPropagate: ...
    @staticmethod
    def add_triggerer_suffix(full_path, job_id: Incomplete | None = ...): ...
    def emit(self, record): ...
    def flush(self): ...
    def close(self): ...
    def read(self, task_instance, try_number: Incomplete | None = ..., metadata: Incomplete | None = ...): ...
