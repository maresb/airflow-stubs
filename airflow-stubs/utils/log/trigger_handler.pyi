import logging
import logging.handlers
from builtins import ContextVar
from typing import ClassVar

TYPE_CHECKING: bool
ctx_task_instance: ContextVar
ctx_trigger_id: ContextVar
ctx_trigger_end: ContextVar
ctx_indiv_trigger: ContextVar

class TriggerMetadataFilter(logging.Filter):
    def filter(self, record): ...

class DropTriggerLogsFilter(logging.Filter):
    def filter(self, record): ...

class TriggererHandlerWrapper(logging.Handler):
    trigger_should_queue: ClassVar[bool] = ...
    def __init__(self, base_handler: FileTaskHandler, level: int = ...) -> None: ...
    def emit(self, record): ...
    def handle(self, record): ...
    def close_one(self, trigger_id): ...
    def flush(self): ...
    def close(self): ...

class LocalQueueHandler(logging.handlers.QueueHandler):
    def emit(self, record: logging.LogRecord) -> None: ...
