import enum
import io
import logging
import typing
from _typeshed import Incomplete
from typing import ClassVar

TYPE_CHECKING: bool

class SetContextPropagate(enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[object]] = ...
    _value2member_map_: ClassVar[dict] = ...
    MAINTAIN_PROPAGATE: ClassVar[SetContextPropagate] = ...
    DISABLE_PROPAGATE: ClassVar[SetContextPropagate] = ...
    @classmethod
    def __init__(cls, value) -> None: ...
def __getattr__(name): ...
def remove_escape_codes(text: str) -> str: ...

class LoggingMixin:
    _log: ClassVar[None] = ...
    _log_config_logger_name: ClassVar[None] = ...
    _logger_name: ClassVar[None] = ...
    def __init__(self, context: Incomplete | None = ...) -> None: ...
    @classmethod
    def logger(cls) -> Logger: ...
    @property
    def log(self): ...

class ExternalLoggingMixin:
    def get_external_log_url(self, task_instance, try_number) -> str: ...
    @property
    def log_name(self): ...
    @property
    def supports_external_link(self): ...

class StreamLogWriter(io.IOBase, typing.IO):
    encoding: ClassVar[None] = ...
    __orig_bases__: ClassVar[tuple] = ...
    __parameters__: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, logger, level) -> None: ...
    def close(self): ...
    def write(self, message): ...
    def flush(self): ...
    def isatty(self): ...
    @property
    def closed(self): ...

class RedirectStdHandler(logging.StreamHandler):
    def __init__(self, stream) -> None: ...
    @property
    def stream(self): ...
def set_context(logger, value): ...
