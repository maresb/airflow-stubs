import abc
import enum
from _typeshed import Incomplete
from io import IOBase
from logging import Logger, StreamHandler
from typing import IO

ANSI_ESCAPE: Incomplete

class SetContextPropagate(enum.Enum):
    MAINTAIN_PROPAGATE = ...
    DISABLE_PROPAGATE = ...

def __getattr__(name): ...
def remove_escape_codes(text: str) -> str: ...

class LoggingMixin:
    def __init__(self, context: Incomplete | None = None) -> None: ...
    @classmethod
    def logger(cls) -> Logger: ...
    @property
    def log(self) -> Logger: ...

class ExternalLoggingMixin(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def log_name(self) -> str: ...
    @abc.abstractmethod
    def get_external_log_url(self, task_instance, try_number) -> str: ...
    @property
    @abc.abstractmethod
    def supports_external_link(self) -> bool: ...

class StreamLogWriter(IOBase, IO[str]):
    encoding: None
    logger: Incomplete
    level: Incomplete
    def __init__(self, logger, level) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    def write(self, message) -> None: ...
    def flush(self) -> None: ...
    def isatty(self): ...

class RedirectStdHandler(StreamHandler):
    def __init__(self, stream) -> None: ...
    @property
    def stream(self): ...

def set_context(logger, value) -> None: ...
