import airflow.settings as settings
import functools
import logging
import types
import typing
from typing import ClassVar, Iterable, Iterator, Redacted, TextIO

TYPE_CHECKING: bool
Redactable: typing.TypeVar
DEFAULT_SENSITIVE_FIELDS: frozenset
SECRETS_TO_SKIP_MASKING_FOR_TESTS: set
get_sensitive_variables_fields: functools._lru_cache_wrapper
def should_hide_value_for_key(name): ...
def mask_secret(secret: str | dict | Iterable, name: str | None = ...) -> None: ...
def redact(value: Redactable, name: str | None = ..., max_depth: int | None = ...) -> Redacted: ...

class SecretsMasker(logging.Filter):
    replacer: ClassVar[None] = ...
    ALREADY_FILTERED_FLAG: ClassVar[str] = ...
    MAX_RECURSION_DEPTH: ClassVar[int] = ...
    _record_attrs_to_ignore: ClassVar[functools.cached_property] = ...
    _mask_adapter: ClassVar[functools.cached_property] = ...
    _test_mode: ClassVar[functools.cached_property] = ...
    def __init__(self) -> None: ...
    def filter(self, record) -> bool: ...
    def redact(self, item: Redactable, name: str | None = ..., max_depth: int | None = ...) -> Redacted: ...
    def add_mask(self, secret: str | dict | Iterable, name: str | None = ...): ...

class RedactedIO(typing.TextIO):
    __parameters__: ClassVar[tuple] = ...
    def __init__(self) -> None: ...
    def __enter__(self) -> TextIO: ...
    def __exit__(self, t: type[BaseException] | None, v: BaseException | None, b: types.TracebackType | None) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __next__(self) -> str: ...
    def close(self) -> None: ...
    def fileno(self) -> int: ...
    def flush(self) -> None: ...
    def isatty(self) -> bool: ...
    def read(self, n: int = ...) -> str: ...
    def readable(self) -> bool: ...
    def readline(self, n: int = ...) -> str: ...
    def readlines(self, n: int = ...) -> list[str]: ...
    def seek(self, offset: int, whence: int = ...) -> int: ...
    def seekable(self) -> bool: ...
    def tell(self) -> int: ...
    def truncate(self, s: int | None = ...) -> int: ...
    def writable(self) -> bool: ...
    def write(self, s: str) -> int: ...
    def writelines(self, lines) -> None: ...
