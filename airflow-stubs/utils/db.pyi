import airflow as airflow
import airflow.settings as settings
import airflow.utils.helpers as helpers
import enum
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException
from airflow.models import import_all_models as import_all_models
from airflow.utils.session import create_session as create_session, provide_session as provide_session
from typing import ClassVar, Generator, Iterable

TYPE_CHECKING: bool
NEW_SESSION: None
def merge_conn(*args, **kwargs): ...
def add_default_pool_if_not_exists(*args, **kwargs): ...
def create_default_connections(*args, **kwargs): ...
def initdb(*args, **kwargs): ...
def check_migrations(timeout): ...
def check_and_run_migrations(): ...
def synchronize_log_template(*args, **kwargs) -> None: ...
def check_conn_id_duplicates(session: Session) -> Iterable[str]: ...
def check_username_duplicates(session: Session) -> Iterable[str]: ...
def reflect_tables(tables: list[Base | str] | None, session): ...
def check_table_for_duplicates() -> Iterable[str]: ...
def check_conn_type_null(session: Session) -> Iterable[str]: ...
def check_run_id_null(session: Session) -> Iterable[str]: ...
def check_bad_references(session: Session) -> Iterable[str]: ...
def print_happy_cat(message): ...
def upgradedb(*args, **kwargs): ...
def resetdb(*args, **kwargs): ...
def bootstrap_dagbag(*args, **kwargs): ...
def downgrade(*args, **kwargs): ...
def drop_airflow_models(connection): ...
def drop_airflow_moved_tables(connection): ...
def check(*args, **kwargs): ...

class DBLocks(enum.IntEnum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[int]] = ...
    _value2member_map_: ClassVar[dict] = ...
    MIGRATIONS: ClassVar[DBLocks] = ...
    SCHEDULER_CRITICAL_SECTION: ClassVar[DBLocks] = ...
    @classmethod
    def __init__(cls, value) -> None: ...
def create_global_lock(*args, **kwds) -> Generator[None, None, None]: ...
def compare_type(context, inspected_column, metadata_column, inspected_type, metadata_type): ...
def compare_server_default(context, inspected_column, metadata_column, inspected_default, metadata_default, rendered_metadata_default): ...
def get_sqla_model_classes(): ...
def get_query_count(query_stmt: Select) -> int: ...
def exists_query(*where: ClauseElement) -> bool: ...
