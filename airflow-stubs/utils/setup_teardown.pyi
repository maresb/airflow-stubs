from airflow.exceptions import AirflowException as AirflowException
from typing import ClassVar

TYPE_CHECKING: bool

class BaseSetupTeardownContext:
    active: ClassVar[bool] = ...
    context_map: ClassVar[dict] = ...
    _context_managed_setup_task: ClassVar[list] = ...
    _previous_context_managed_setup_task: ClassVar[list] = ...
    _context_managed_teardown_task: ClassVar[list] = ...
    _previous_context_managed_teardown_task: ClassVar[list] = ...
    _teardown_downstream_of_setup: ClassVar[list] = ...
    _previous_teardown_downstream_of_setup: ClassVar[list] = ...
    _setup_upstream_of_teardown: ClassVar[list] = ...
    _previous_setup_upstream_of_teardown: ClassVar[list] = ...
    @classmethod
    def push_context_managed_setup_task(cls, task: AbstractOperator | list[AbstractOperator]): ...
    @classmethod
    def push_context_managed_teardown_task(cls, task: AbstractOperator | list[AbstractOperator]): ...
    @classmethod
    def pop_context_managed_setup_task(cls) -> AbstractOperator | list[AbstractOperator]: ...
    @classmethod
    def pop_context_managed_teardown_task(cls) -> AbstractOperator | list[AbstractOperator]: ...
    @classmethod
    def pop_teardown_downstream_of_setup(cls) -> AbstractOperator | list[AbstractOperator]: ...
    @classmethod
    def pop_setup_upstream_of_teardown(cls) -> AbstractOperator | list[AbstractOperator]: ...
    @classmethod
    def set_dependency(cls, receiving_task: AbstractOperator | list[AbstractOperator], new_task: AbstractOperator | list[AbstractOperator], upstream: bool = ...): ...
    @classmethod
    def update_context_map(cls, task: DependencyMixin): ...
    @classmethod
    def push_setup_teardown_task(cls, operator: AbstractOperator | list[AbstractOperator]): ...
    @classmethod
    def set_teardown_task_as_leaves(cls, leaves): ...
    @classmethod
    def set_setup_task_as_roots(cls, roots): ...
    @classmethod
    def set_work_task_roots_and_leaves(cls): ...
    @classmethod
    def set_setup_teardown_relationships(cls): ...
    @classmethod
    def error(cls, message: str): ...

class SetupTeardownContext(BaseSetupTeardownContext):
    _context_managed_teardown_task: ClassVar[list] = ...
    _setup_upstream_of_teardown: ClassVar[list] = ...
    active: ClassVar[bool] = ...
    _context_managed_setup_task: ClassVar[list] = ...
    _teardown_downstream_of_setup: ClassVar[list] = ...
    @staticmethod
    def add_task(task: AbstractOperator | PlainXComArg): ...
