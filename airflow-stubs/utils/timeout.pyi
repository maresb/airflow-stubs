from _typeshed import Incomplete
from airflow.exceptions import AirflowTaskTimeout as AirflowTaskTimeout
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.platform import IS_WINDOWS as IS_WINDOWS

class TimeoutWindows(_timeout, LoggingMixin):
    seconds: Incomplete
    error_message: Incomplete
    def __init__(self, seconds: int = 1, error_message: str = 'Timeout') -> None: ...
    def handle_timeout(self, *args) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type_: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

class TimeoutPosix(_timeout, LoggingMixin):
    seconds: Incomplete
    error_message: Incomplete
    def __init__(self, seconds: int = 1, error_message: str = 'Timeout') -> None: ...
    def handle_timeout(self, signum, frame) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type_: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

timeout: type[TimeoutWindows | TimeoutPosix]
timeout = TimeoutPosix
