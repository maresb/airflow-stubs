import enum
from typing import ClassVar

TYPE_CHECKING: bool

class ArgNotSet:
    __slotnames__: ClassVar[list] = ...
NOTSET: ArgNotSet

class DagRunType(str, enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[str]] = ...
    _value2member_map_: ClassVar[dict] = ...
    BACKFILL_JOB: ClassVar[DagRunType] = ...
    SCHEDULED: ClassVar[DagRunType] = ...
    MANUAL: ClassVar[DagRunType] = ...
    DATASET_TRIGGERED: ClassVar[DagRunType] = ...
    def generate_run_id(self, logical_date: datetime) -> str: ...
    @staticmethod
    def from_run_id(run_id: str) -> DagRunType: ...
    def __format__(self, format_spec) -> str: ...
    @classmethod
    def __init__(cls, value) -> None: ...

class EdgeInfoType(dict):
    __total__: ClassVar[bool] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
