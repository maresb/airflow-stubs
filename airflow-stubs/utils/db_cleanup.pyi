import airflow.utils.timezone as timezone
import dataclasses
import sqlalchemy.ext.compiler
import sqlalchemy.sql.base
import sqlalchemy.sql.elements
from airflow.cli.simple_table import AirflowConsole as AirflowConsole
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException
from airflow.utils.db import reflect_tables as reflect_tables
from airflow.utils.helpers import ask_yesno as ask_yesno
from airflow.utils.session import provide_session as provide_session
from typing import Any, ClassVar

TYPE_CHECKING: bool
NEW_SESSION: None
ARCHIVE_TABLE_PREFIX: str

class _TableConfig:
    extra_columns: ClassVar[None] = ...
    keep_last: ClassVar[bool] = ...
    keep_last_filters: ClassVar[None] = ...
    keep_last_group_by: ClassVar[None] = ...
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __dataclass_fields__: ClassVar[dict] = ...
    def __post_init__(self): ...
    def __lt__(self, other) -> bool: ...
    def __init__(self, table_name: str, recency_column_name: str, extra_columns: list[str] | None = ..., keep_last: bool = ..., keep_last_filters: Any | None = ..., keep_last_group_by: Any | None = ...) -> None: ...
    def __eq__(self, other) -> bool: ...
    @property
    def readable_config(self): ...
config_list: list
config_dict: dict

class CreateTableAs(sqlalchemy.sql.base.Executable, sqlalchemy.sql.elements.ClauseElement):
    _compiler_dispatcher: ClassVar[sqlalchemy.ext.compiler._dispatcher] = ...
    def __init__(self, name, query) -> None: ...
def run_cleanup(*args, **kwargs): ...
def export_archived_records(*args, **kwargs): ...
def drop_archived_tables(*args, **kwargs): ...
