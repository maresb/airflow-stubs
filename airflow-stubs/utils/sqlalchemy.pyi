from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.serialization.enums import Encoding as Encoding
from airflow.utils.timezone import make_naive as make_naive, utc as utc
from kubernetes.client.models.v1_pod import V1Pod
from sqlalchemy import PickleType
from sqlalchemy.exc import OperationalError as OperationalError
from sqlalchemy.orm import Query as Query, Session as Session
from sqlalchemy.sql import ColumnElement as ColumnElement, Select as Select
from sqlalchemy.sql.expression import ColumnOperators as ColumnOperators
from sqlalchemy.types import Text, TypeDecorator, TypeEngine as TypeEngine
from typing import Any, Generator, Iterable, overload

log: Incomplete

class UtcDateTime(TypeDecorator):
    impl: Incomplete
    cache_ok: bool
    def process_bind_param(self, value, dialect): ...
    def process_result_value(self, value, dialect): ...
    def load_dialect_impl(self, dialect): ...

class ExtendedJSON(TypeDecorator):
    impl = Text
    cache_ok: bool
    should_evaluate_none: bool
    def load_dialect_impl(self, dialect) -> TypeEngine: ...
    def process_bind_param(self, value, dialect): ...
    def process_result_value(self, value, dialect): ...

def sanitize_for_serialization(obj: V1Pod): ...
def ensure_pod_is_valid_after_unpickling(pod: V1Pod) -> V1Pod | None: ...

class ExecutorConfigType(PickleType):
    cache_ok: bool
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    def compare_values(self, x, y): ...

class Interval(TypeDecorator):
    impl = Text
    cache_ok: bool
    attr_keys: Incomplete
    def process_bind_param(self, value, dialect): ...
    def process_result_value(self, value, dialect): ...

def nulls_first(col, session: Session) -> dict[str, Any]: ...

USE_ROW_LEVEL_LOCKING: bool

def with_row_locks(query: Query, session: Session, *, nowait: bool = False, skip_locked: bool = False, **kwargs) -> Query: ...
def lock_rows(query: Query, session: Session) -> Generator[None, None, None]: ...

class CommitProhibitorGuard:
    expected_commit: bool
    session: Incomplete
    def __init__(self, session: Session) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info) -> None: ...
    def commit(self) -> None: ...

def prohibit_commit(session): ...
def is_lock_not_available_error(error: OperationalError): ...
@overload
def tuple_in_condition(columns: tuple[ColumnElement, ...], collection: Iterable[Any]) -> ColumnOperators: ...
@overload
def tuple_in_condition(columns: tuple[ColumnElement, ...], collection: Select, *, session: Session) -> ColumnOperators: ...
@overload
def tuple_not_in_condition(columns: tuple[ColumnElement, ...], collection: Iterable[Any]) -> ColumnOperators: ...
@overload
def tuple_not_in_condition(columns: tuple[ColumnElement, ...], collection: Select, *, session: Session) -> ColumnOperators: ...
def get_orm_mapper(): ...
def is_sqlalchemy_v1() -> bool: ...
