import airflow.settings as settings
import sqlalchemy.sql.sqltypes
import sqlalchemy.sql.type_api
from airflow.configuration import conf as conf
from airflow.serialization.enums import Encoding as Encoding
from airflow.utils.timezone import make_naive as make_naive
from sqlalchemy.sql.selectable import Select
from typing import Any, ClassVar, Generator, Iterable

TYPE_CHECKING: bool

class UtcDateTime(sqlalchemy.sql.type_api.TypeDecorator):
    impl: ClassVar[sqlalchemy.sql.sqltypes.TIMESTAMP] = ...
    cache_ok: ClassVar[bool] = ...
    def process_bind_param(self, value, dialect): ...
    def process_result_value(self, value, dialect): ...
    def load_dialect_impl(self, dialect): ...

class ExtendedJSON(sqlalchemy.sql.type_api.TypeDecorator):
    impl: ClassVar[type[sqlalchemy.sql.sqltypes.Text]] = ...
    cache_ok: ClassVar[bool] = ...
    def load_dialect_impl(self, dialect) -> TypeEngine: ...
    def process_bind_param(self, value, dialect): ...
    def process_result_value(self, value, dialect): ...
def sanitize_for_serialization(obj: V1Pod): ...
def ensure_pod_is_valid_after_unpickling(pod: V1Pod) -> V1Pod | None: ...

class ExecutorConfigType(sqlalchemy.sql.sqltypes.PickleType):
    cache_ok: ClassVar[bool] = ...
    def bind_processor(self, dialect): ...
    def result_processor(self, dialect, coltype): ...
    def compare_values(self, x, y): ...

class Interval(sqlalchemy.sql.type_api.TypeDecorator):
    impl: ClassVar[type[sqlalchemy.sql.sqltypes.Text]] = ...
    cache_ok: ClassVar[bool] = ...
    attr_keys: ClassVar[dict] = ...
    def process_bind_param(self, value, dialect): ...
    def process_result_value(self, value, dialect): ...
def skip_locked(session: Session) -> dict[str, Any]: ...
def nowait(session: Session) -> dict[str, Any]: ...
def nulls_first(col, session: Session) -> dict[str, Any]: ...

USE_ROW_LEVEL_LOCKING: bool
def with_row_locks(query: Query, session: Session, **kwargs) -> Query: ...
def lock_rows(*args, **kwds) -> Generator[None, None, None]: ...

class CommitProhibitorGuard:
    expected_commit: ClassVar[bool] = ...
    def __init__(self, session: Session) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info): ...
    def commit(self): ...
def prohibit_commit(session): ...
def is_lock_not_available_error(error: OperationalError): ...
def tuple_in_condition(columns: tuple[ColumnElement, ...], collection: Iterable[Any] | Select) -> ColumnOperators: ...
def tuple_not_in_condition(columns: tuple[ColumnElement, ...], collection: Iterable[Any] | Select) -> ColumnOperators: ...
