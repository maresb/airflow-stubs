import airflow.sensors.base
import airflow.utils.timezone as timezone
from _typeshed import Incomplete
from airflow.sensors.base import BaseSensorOperator as BaseSensorOperator
from airflow.triggers.temporal import DateTimeTrigger as DateTimeTrigger
from typing import ClassVar

TYPE_CHECKING: bool

class DateTimeSensor(airflow.sensors.base.BaseSensorOperator):
    template_fields: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def poke(self, context: Context) -> bool: ...

class DateTimeSensorAsync(DateTimeSensor):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute(self, context: Context): ...
    def execute_complete(self, context, event: Incomplete | None = ...): ...
