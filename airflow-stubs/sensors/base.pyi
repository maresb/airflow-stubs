import airflow.models.baseoperator
import airflow.models.skipmixin
import airflow.settings as settings
import airflow.utils.timezone as timezone
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException, AirflowFailException as AirflowFailException, AirflowRescheduleException as AirflowRescheduleException, AirflowSensorTimeout as AirflowSensorTimeout, AirflowSkipException as AirflowSkipException, AirflowTaskTimeout as AirflowTaskTimeout, TaskDeferralError as TaskDeferralError
from airflow.executors.executor_loader import ExecutorLoader as ExecutorLoader
from airflow.models.baseoperator import BaseOperator as BaseOperator
from airflow.models.skipmixin import SkipMixin as SkipMixin
from airflow.models.taskreschedule import TaskReschedule as TaskReschedule
from airflow.ti_deps.deps.ready_to_reschedule import ReadyToRescheduleDep as ReadyToRescheduleDep
from airflow.utils.decorators import apply_defaults as apply_defaults
from airflow.utils.session import create_session as create_session
from typing import Any, ClassVar

TYPE_CHECKING: bool

class PokeReturnValue:
    def __init__(self, is_done: bool, xcom_value: Any | None = ...) -> None: ...
    def __bool__(self) -> bool: ...

class BaseSensorOperator(airflow.models.baseoperator.BaseOperator, airflow.models.skipmixin.SkipMixin):
    ui_color: ClassVar[str] = ...
    valid_modes: ClassVar[list] = ...
    deps: ClassVar[frozenset] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def poke(self, context: Context) -> bool | PokeReturnValue: ...
    def execute(self, context: Context) -> Any: ...
    def resume_execution(self, next_method: str, next_kwargs: dict[str, Any] | None, context: Context): ...
    def prepare_for_execution(self) -> BaseOperator: ...
    @classmethod
    def get_serialized_fields(cls): ...
    @property
    def reschedule(self): ...
def poke_mode_only(cls): ...
