import airflow.models.baseoperatorlink
import airflow.operators.empty
import airflow.sensors.base
from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException, AirflowSkipException as AirflowSkipException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models.baseoperatorlink import BaseOperatorLink as BaseOperatorLink
from airflow.models.dag import DagModel as DagModel
from airflow.models.dagbag import DagBag as DagBag
from airflow.models.dagrun import DagRun as DagRun
from airflow.models.taskinstance import TaskInstance as TaskInstance
from airflow.operators.empty import EmptyOperator as EmptyOperator
from airflow.sensors.base import BaseSensorOperator as BaseSensorOperator
from airflow.triggers.external_task import TaskStateTrigger as TaskStateTrigger
from airflow.utils.decorators import warnings as warnings
from airflow.utils.file import correct_maybe_zipped as correct_maybe_zipped
from airflow.utils.helpers import build_airflow_url_with_query as build_airflow_url_with_query
from airflow.utils.session import provide_session as provide_session
from airflow.utils.sqlalchemy import tuple_in_condition as tuple_in_condition
from airflow.utils.state import State as State, TaskInstanceState as TaskInstanceState
from airflow.utils.timezone import utcnow as utcnow
from typing import ClassVar

TYPE_CHECKING: bool
NEW_SESSION: None

class ExternalDagLink(airflow.models.baseoperatorlink.BaseOperatorLink):
    name: ClassVar[str] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def get_link(self, operator, dttm): ...

class ExternalTaskSensor(airflow.sensors.base.BaseSensorOperator):
    template_fields: ClassVar[list] = ...
    ui_color: ClassVar[str] = ...
    operator_extra_links: ClassVar[list] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def poke(self, *args, **kwargs) -> bool: ...
    def execute(self, context: Context) -> None: ...
    def execute_complete(self, context, event: Incomplete | None = ...): ...
    def get_count(self, dttm_filter, session, states) -> int: ...
    def get_external_task_group_task_ids(self, session, dttm_filter): ...

class ExternalTaskMarker(airflow.operators.empty.EmptyOperator):
    template_fields: ClassVar[list] = ...
    ui_color: ClassVar[str] = ...
    operator_extra_links: ClassVar[list] = ...
    _ExternalTaskMarker__serialized_fields: ClassVar[None] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def get_serialized_fields(cls): ...

class ExternalTaskSensorLink(ExternalDagLink):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __attrs_attrs__: ClassVar[ExternalTaskSensorLinkAttributes] = ...
    def __attrs_post_init__(self): ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __init__(self) -> None: ...
