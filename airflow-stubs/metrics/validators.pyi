import abc
from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.exceptions import InvalidStatsNameException as InvalidStatsNameException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from typing import Callable, Iterable, Pattern

log: Incomplete

class MetricNameLengthExemptionWarning(Warning): ...

ALLOWED_CHARACTERS: Incomplete
BACK_COMPAT_METRIC_NAME_PATTERNS: set[str]
BACK_COMPAT_METRIC_NAMES: set[Pattern[str]]
OTEL_NAME_MAX_LENGTH: int
DEFAULT_VALIDATOR_TYPE: str

def get_validator() -> ListValidator: ...
def validate_stat(fn: Callable) -> Callable: ...
def stat_name_otel_handler(stat_prefix: str, stat_name: str, max_length: int = ...) -> str: ...
def stat_name_default_handler(stat_name: str, max_length: int = 250, allowed_chars: Iterable[str] = ...) -> str: ...
def get_current_handler_stat_name_func() -> Callable[[str], str]: ...

class ListValidator(metaclass=abc.ABCMeta):
    validate_list: tuple[str, ...] | None
    def __init__(self, validate_list: str | None = None) -> None: ...
    @classmethod
    def __subclasshook__(cls, subclass: Callable[[str], str]) -> bool: ...
    @abc.abstractmethod
    def test(self, name: str) -> bool: ...

class AllowListValidator(ListValidator):
    def test(self, name: str) -> bool: ...

class PatternAllowListValidator(ListValidator):
    def test(self, name: str) -> bool: ...

class BlockListValidator(ListValidator):
    def test(self, name: str) -> bool: ...

class PatternBlockListValidator(ListValidator):
    def test(self, name: str) -> bool: ...
