from airflow.metrics.protocols import DeltaType as DeltaType, Timer as Timer, TimerProtocol as TimerProtocol
from airflow.typing_compat import Protocol as Protocol
from typing import Any

class StatsLogger(Protocol):
    instance: StatsLogger | NoStatsLogger | None
    @classmethod
    def incr(cls, stat: str, count: int = 1, rate: int | float = 1, *, tags: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def decr(cls, stat: str, count: int = 1, rate: int | float = 1, *, tags: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def gauge(cls, stat: str, value: float, rate: int | float = 1, delta: bool = False, *, tags: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def timing(cls, stat: str, dt: DeltaType | None, *, tags: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def timer(cls, *args, **kwargs) -> TimerProtocol: ...

class NoStatsLogger:
    @classmethod
    def incr(cls, stat: str, count: int = 1, rate: int = 1, *, tags: dict[str, str] | None = None) -> None: ...
    @classmethod
    def decr(cls, stat: str, count: int = 1, rate: int = 1, *, tags: dict[str, str] | None = None) -> None: ...
    @classmethod
    def gauge(cls, stat: str, value: int, rate: int = 1, delta: bool = False, *, tags: dict[str, str] | None = None) -> None: ...
    @classmethod
    def timing(cls, stat: str, dt: DeltaType, *, tags: dict[str, str] | None = None) -> None: ...
    @classmethod
    def timer(cls, *args, **kwargs) -> TimerProtocol: ...
