from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.metrics.protocols import DeltaType as DeltaType, Timer as Timer, TimerProtocol as TimerProtocol
from airflow.metrics.validators import AllowListValidator as AllowListValidator, ListValidator as ListValidator, OTEL_NAME_MAX_LENGTH as OTEL_NAME_MAX_LENGTH, get_validator as get_validator, stat_name_otel_handler as stat_name_otel_handler
from airflow.utils.net import get_hostname as get_hostname
from opentelemetry.metrics import Instrument as Instrument, Observation
from opentelemetry.util.types import Attributes as Attributes
from typing import Callable, Iterable

log: Incomplete
GaugeValues = int | float
DEFAULT_GAUGE_VALUE: float
UP_DOWN_COUNTERS: Incomplete
DEFAULT_METRIC_NAME_PREFIX: str
DEFAULT_METRIC_NAME_DELIMITER: str

def full_name(name: str, *, prefix: str = ...) -> str: ...
def name_is_otel_safe(prefix: str, name: str) -> bool: ...

class _OtelTimer(Timer):
    otel_logger: Incomplete
    name: Incomplete
    tags: Incomplete
    def __init__(self, otel_logger: SafeOtelLogger, name: str | None, tags: Attributes) -> None: ...
    def stop(self, send: bool = True) -> None: ...

class SafeOtelLogger:
    otel: Callable
    prefix: str
    metrics_validator: Incomplete
    meter: Incomplete
    metrics_map: Incomplete
    def __init__(self, otel_provider, prefix: str = ..., metrics_validator: ListValidator = ...) -> None: ...
    def incr(self, stat: str, count: int = 1, rate: float = 1, tags: Attributes = None): ...
    def decr(self, stat: str, count: int = 1, rate: float = 1, tags: Attributes = None): ...
    def gauge(self, stat: str, value: int | float, rate: float = 1, delta: bool = False, *, tags: Attributes = None, back_compat_name: str = '') -> None: ...
    def timing(self, stat: str, dt: DeltaType, *, tags: Attributes = None) -> None: ...
    def timer(self, stat: str | None = None, *args, tags: Attributes = None, **kwargs) -> TimerProtocol: ...

class MetricsMap:
    meter: Incomplete
    map: Incomplete
    def __init__(self, meter) -> None: ...
    def clear(self) -> None: ...
    def get_counter(self, name: str, attributes: Attributes = None): ...
    def del_counter(self, name: str, attributes: Attributes = None) -> None: ...
    def set_gauge_value(self, name: str, value: float | None, delta: bool, tags: Attributes): ...
    def read_gauge(self, key: str, *args) -> Iterable[Observation]: ...
    def poke_gauge(self, name: str, attributes: Attributes = None) -> GaugeValues: ...

def get_otel_logger(cls) -> SafeOtelLogger: ...
