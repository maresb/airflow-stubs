import types
import typing
from typing import ClassVar

class TimerProtocol(typing.Protocol):
    __parameters__: ClassVar[tuple] = ...
    _is_protocol: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __enter__(self) -> Timer: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def start(self) -> Timer: ...
    def stop(self, send: bool = ...) -> None: ...
    def __subclasshook__(self, other): ...
    def __init__(self, *args, **kwargs) -> None: ...

class Timer(TimerProtocol):
    __parameters__: ClassVar[tuple] = ...
    _is_protocol: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, real_timer: Timer | None = ...) -> None: ...
    def __enter__(self) -> Timer: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def start(self) -> Timer: ...
    def stop(self, send: bool = ...) -> None: ...
    def __subclasshook__(self, other): ...
