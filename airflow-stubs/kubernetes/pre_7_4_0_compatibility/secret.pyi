import airflow.kubernetes.pre_7_4_0_compatibility.k8s_model
import k8s
from _typeshed import Incomplete
from airflow.exceptions import AirflowConfigException as AirflowConfigException
from airflow.kubernetes.pre_7_4_0_compatibility.k8s_model import K8SModel as K8SModel
from typing import ClassVar

class Secret(airflow.kubernetes.pre_7_4_0_compatibility.k8s_model.K8SModel):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, deploy_type, deploy_target, secret, key: Incomplete | None = ..., items: Incomplete | None = ...) -> None: ...
    def to_env_secret(self) -> k8s.V1EnvVar: ...
    def to_env_from_secret(self) -> k8s.V1EnvFromSource: ...
    def to_volume_secret(self) -> tuple[k8s.V1Volume, k8s.V1VolumeMount]: ...
    def attach_to_pod(self, pod: k8s.V1Pod) -> k8s.V1Pod: ...
    def __eq__(self, other) -> bool: ...
