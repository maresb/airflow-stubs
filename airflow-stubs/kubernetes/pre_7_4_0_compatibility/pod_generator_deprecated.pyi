import k8s
import kubernetes.client.models.v1_container
import kubernetes.client.models.v1_volume
import kubernetes.client.models.v1_volume_mount
from airflow.utils.hashlib_wrapper import md5 as md5
from typing import ClassVar

MAX_POD_ID_LEN: int
MAX_LABEL_LEN: int

class PodDefaults:
    XCOM_MOUNT_PATH: ClassVar[str] = ...
    SIDECAR_CONTAINER_NAME: ClassVar[str] = ...
    XCOM_CMD: ClassVar[str] = ...
    VOLUME_MOUNT: ClassVar[kubernetes.client.models.v1_volume_mount.V1VolumeMount] = ...
    VOLUME: ClassVar[kubernetes.client.models.v1_volume.V1Volume] = ...
    SIDECAR_CONTAINER: ClassVar[kubernetes.client.models.v1_container.V1Container] = ...
def make_safe_label_value(string): ...

class PodGenerator:
    def __init__(self, image: str | None = ..., name: str | None = ..., namespace: str | None = ..., volume_mounts: list[k8s.V1VolumeMount | dict] | None = ..., envs: dict[str, str] | None = ..., cmds: list[str] | None = ..., args: list[str] | None = ..., labels: dict[str, str] | None = ..., node_selectors: dict[str, str] | None = ..., ports: list[k8s.V1ContainerPort | dict] | None = ..., volumes: list[k8s.V1Volume | dict] | None = ..., image_pull_policy: str | None = ..., restart_policy: str | None = ..., image_pull_secrets: str | None = ..., init_containers: list[k8s.V1Container] | None = ..., service_account_name: str | None = ..., resources: k8s.V1ResourceRequirements | dict | None = ..., annotations: dict[str, str] | None = ..., affinity: dict | None = ..., hostnetwork: bool = ..., tolerations: list | None = ..., security_context: k8s.V1PodSecurityContext | dict | None = ..., configmaps: list[str] | None = ..., dnspolicy: str | None = ..., schedulername: str | None = ..., extract_xcom: bool = ..., priority_class_name: str | None = ...) -> None: ...
    def gen_pod(self) -> k8s.V1Pod: ...
    @staticmethod
    def add_sidecar(pod: k8s.V1Pod) -> k8s.V1Pod: ...
    @staticmethod
    def from_obj(obj) -> k8s.V1Pod | None: ...
    @staticmethod
    def make_unique_pod_id(dag_id): ...
