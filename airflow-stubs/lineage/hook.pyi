import attr
from _typeshed import Incomplete
from airflow.datasets import Dataset as Dataset
from airflow.hooks.base import BaseHook as BaseHook
from airflow.io.path import ObjectStoragePath as ObjectStoragePath
from airflow.providers_manager import ProvidersManager as ProvidersManager
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin

LineageContext = BaseHook | ObjectStoragePath

@attr.define
class DatasetLineageInfo:
    dataset: Dataset
    count: int
    context: LineageContext

@attr.define
class HookLineage:
    inputs: list[DatasetLineageInfo] = ...
    outputs: list[DatasetLineageInfo] = ...

class HookLineageCollector(LoggingMixin):
    def __init__(self, **kwargs) -> None: ...
    def create_dataset(self, scheme: str | None, uri: str | None, dataset_kwargs: dict | None, dataset_extra: dict | None) -> Dataset | None: ...
    def add_input_dataset(self, context: LineageContext, scheme: str | None = None, uri: str | None = None, dataset_kwargs: dict | None = None, dataset_extra: dict | None = None): ...
    def add_output_dataset(self, context: LineageContext, scheme: str | None = None, uri: str | None = None, dataset_kwargs: dict | None = None, dataset_extra: dict | None = None): ...
    @property
    def collected_datasets(self) -> HookLineage: ...
    @property
    def has_collected(self) -> bool: ...

class NoOpCollector(HookLineageCollector):
    def add_input_dataset(self, *_, **__) -> None: ...
    def add_output_dataset(self, *_, **__) -> None: ...
    @property
    def collected_datasets(self) -> HookLineage: ...

class HookLineageReader(LoggingMixin):
    lineage_collector: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def retrieve_hook_lineage(self) -> HookLineage: ...

def get_hook_lineage_collector() -> HookLineageCollector: ...
