from typing import Any, ClassVar

class File:
    template_fields: ClassVar
    url: str
    type_hint: str | None
    def __init__(self, url) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class User:
    email: str
    first_name: str | None
    last_name: str | None
    template_fields: ClassVar
    def __init__(self, email) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class Tag:
    tag_name: str
    template_fields: ClassVar
    def __init__(self, tag_name) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class Column:
    name: str
    description: str | None
    data_type: str
    tags: list[Tag]
    template_fields: ClassVar
    def __init__(self, name, data_type) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

def default_if_none(arg: bool | None) -> bool: ...

class Table:
    database: str
    cluster: str
    name: str
    tags: list[Tag]
    description: str | None
    columns: list[Column]
    owners: list[User]
    extra: dict[str, Any]
    type_hint: str | None
    template_fields: ClassVar
    def __init__(self, database, cluster, name) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
