import functools
import os
import typing
import upath.implementations.cloud
from _typeshed import Incomplete
from airflow.io.store import attach as attach
from airflow.io.utils.stat import stat_result as stat_result
from typing import ClassVar

PT: typing.TypeVar
default: str

class _AirflowCloudAccessor(upath.implementations.cloud._CloudAccessor):
    def __init__(self, parsed_url: SplitResult | None, conn_id: str | None = ..., **kwargs: typing.Any) -> None: ...
    def __eq__(self, other) -> bool: ...

class ObjectStoragePath(upath.implementations.cloud.CloudPath):
    class _default_accessor(upath.implementations.cloud._CloudAccessor):
        def __init__(self, parsed_url: SplitResult | None, conn_id: str | None = ..., **kwargs: typing.Any) -> None: ...
        def __eq__(self, other) -> bool: ...
    __version__: ClassVar[int] = ...
    sep: ClassVar[str] = ...
    root_marker: ClassVar[str] = ...
    __hash__: ClassVar[functools._lru_cache_wrapper] = ...
    @classmethod
    def __init__(cls: type[PT], *args: str | os.PathLike, **kwargs: typing.Any) -> PT: ...
    def __eq__(self, other: typing.Any) -> bool: ...
    def samestore(self, other: typing.Any) -> bool: ...
    def stat(self) -> stat_result: ...
    def samefile(self, other_path: typing.Any) -> bool: ...
    def replace(self, target) -> ObjectStoragePath: ...
    @classmethod
    def cwd(cls): ...
    @classmethod
    def home(cls): ...
    def ukey(self) -> str: ...
    def checksum(self) -> int: ...
    def read_block(self, offset: int, length: int, delimiter: Incomplete | None = ...): ...
    def sign(self, expiration: int = ..., **kwargs): ...
    def size(self) -> int: ...
    def copy(self, dst: str | ObjectStoragePath, recursive: bool = ..., **kwargs) -> None: ...
    def move(self, path: str | ObjectStoragePath, recursive: bool = ..., **kwargs) -> None: ...
    def serialize(self) -> dict[str, typing.Any]: ...
    @classmethod
    def deserialize(cls, data: dict, version: int) -> ObjectStoragePath: ...
    @property
    def container(self): ...
    @property
    def bucket(self): ...
    @property
    def key(self): ...
