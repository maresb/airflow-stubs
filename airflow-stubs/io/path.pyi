import typing
from _typeshed import Incomplete
from airflow.io.store import attach as attach
from airflow.io.utils.stat import stat_result as stat_result
from airflow.lineage.hook import get_hook_lineage_collector as get_hook_lineage_collector
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from fsspec import AbstractFileSystem as AbstractFileSystem
from upath.implementations.cloud import CloudPath

PT = typing.TypeVar('PT', bound='ObjectStoragePath')
default: str

class TrackingFileWrapper(LoggingMixin):
    def __init__(self, path: ObjectStoragePath, obj) -> None: ...
    def __getattr__(self, name): ...
    def __getitem__(self, key): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...

class ObjectStoragePath(CloudPath):
    __version__: typing.ClassVar[int]
    sep: typing.ClassVar[str]
    root_marker: typing.ClassVar[str]
    def __hash__(self) -> int: ...
    def __eq__(self, other: typing.Any) -> bool: ...
    def samestore(self, other: typing.Any) -> bool: ...
    @property
    def container(self) -> str: ...
    @property
    def bucket(self) -> str: ...
    @property
    def key(self) -> str: ...
    @property
    def namespace(self) -> str: ...
    def open(self, mode: str = 'r', **kwargs): ...
    def stat(self) -> stat_result: ...
    def samefile(self, other_path: typing.Any) -> bool: ...
    def replace(self, target) -> ObjectStoragePath: ...
    @classmethod
    def cwd(cls): ...
    @classmethod
    def home(cls): ...
    def ukey(self) -> str: ...
    def checksum(self) -> int: ...
    def read_block(self, offset: int, length: int, delimiter: Incomplete | None = None): ...
    def sign(self, expiration: int = 100, **kwargs): ...
    def size(self) -> int: ...
    def copy(self, dst: str | ObjectStoragePath, recursive: bool = False, **kwargs) -> None: ...
    def move(self, path: str | ObjectStoragePath, recursive: bool = False, **kwargs) -> None: ...
    def serialize(self) -> dict[str, typing.Any]: ...
    @classmethod
    def deserialize(cls, data: dict, version: int) -> ObjectStoragePath: ...
