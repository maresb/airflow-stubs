import airflow.sensors.base
import enum
from _typeshed import Incomplete
from airflow.api.common.experimental.get_task_instance import get_task_instance as get_task_instance
from airflow.exceptions import AirflowException as AirflowException, RemovedInAirflow3Warning as RemovedInAirflow3Warning, TaskInstanceNotFound as TaskInstanceNotFound
from airflow.models.dag import DagContext as DagContext
from airflow.models.dagrun import DagRun as DagRun
from airflow.models.pool import Pool as Pool
from airflow.models.taskinstance import TaskInstance as TaskInstance
from airflow.sensors.base import BaseSensorOperator as BaseSensorOperator
from airflow.utils.session import create_session as create_session, provide_session as provide_session
from airflow.utils.state import DagRunState as DagRunState, TaskInstanceState as TaskInstanceState
from airflow.utils.types import DagRunType as DagRunType
from typing import ClassVar

TYPE_CHECKING: bool
NEW_SESSION: None

class SkippedStatePropagationOptions(enum.Enum):
    _member_names_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_type_: ClassVar[type[object]] = ...
    _value2member_map_: ClassVar[dict] = ...
    ALL_LEAVES: ClassVar[SkippedStatePropagationOptions] = ...
    ANY_LEAF: ClassVar[SkippedStatePropagationOptions] = ...
    @classmethod
    def __init__(cls, value) -> None: ...

class SubDagOperator(airflow.sensors.base.BaseSensorOperator):
    ui_color: ClassVar[str] = ...
    ui_fgcolor: ClassVar[str] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def pre_execute(self, context): ...
    def poke(self, context: Context): ...
    def post_execute(self, context, result: Incomplete | None = ...): ...
