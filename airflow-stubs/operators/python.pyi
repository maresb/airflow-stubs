import airflow.models.baseoperator
import airflow.models.skipmixin
import airflow.operators.branch
import airflow.utils.hashlib_wrapper as hashlib_wrapper
from airflow.exceptions import AirflowConfigException as AirflowConfigException, AirflowException as AirflowException, AirflowSkipException as AirflowSkipException, DeserializingResultError as DeserializingResultError, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models.baseoperator import BaseOperator as BaseOperator
from airflow.models.skipmixin import SkipMixin as SkipMixin
from airflow.models.variable import Variable as Variable
from airflow.operators.branch import BranchMixIn as BranchMixIn
from airflow.utils.context import context_copy_partial as context_copy_partial, context_merge as context_merge
from airflow.utils.decorators import warnings as warnings
from airflow.utils.file import get_unique_dag_module_name as get_unique_dag_module_name
from airflow.utils.operator_helpers import KeywordParameters as KeywordParameters
from airflow.utils.process_utils import execute_in_subprocess as execute_in_subprocess
from airflow.utils.python_virtualenv import prepare_virtualenv as prepare_virtualenv, write_python_script as write_python_script
from typing import Any, Callable, ClassVar, Mapping

TYPE_CHECKING: bool
def is_venv_installed() -> bool: ...
def task(python_callable: Callable | None = ..., multiple_outputs: bool | None = ..., **kwargs): ...

class PythonOperator(airflow.models.baseoperator.BaseOperator):
    template_fields: ClassVar[tuple] = ...
    template_fields_renderers: ClassVar[dict] = ...
    BLUE: ClassVar[str] = ...
    ui_color: ClassVar[str] = ...
    shallow_copy_attrs: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute(self, context: Context) -> Any: ...
    def determine_kwargs(self, context: Mapping[str, Any]) -> Mapping[str, Any]: ...
    def execute_callable(self) -> Any: ...

class BranchPythonOperator(PythonOperator, airflow.operators.branch.BranchMixIn):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def execute(self, context: Context) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...

class ShortCircuitOperator(PythonOperator, airflow.models.skipmixin.SkipMixin):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute(self, context: Context) -> Any: ...

class _BasePythonVirtualenvOperator(PythonOperator):
    BASE_SERIALIZABLE_CONTEXT_KEYS: ClassVar[set] = ...
    PENDULUM_SERIALIZABLE_CONTEXT_KEYS: ClassVar[set] = ...
    AIRFLOW_SERIALIZABLE_CONTEXT_KEYS: ClassVar[set] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute(self, context: Context) -> Any: ...
    def get_python_source(self): ...
    def __deepcopy__(self, memo): ...
    def determine_kwargs(self, context: Mapping[str, Any]) -> Mapping[str, Any]: ...

class PythonVirtualenvOperator(_BasePythonVirtualenvOperator):
    template_fields: ClassVar[tuple] = ...
    template_ext: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute_callable(self): ...

class BranchPythonVirtualenvOperator(PythonVirtualenvOperator, airflow.operators.branch.BranchMixIn):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def execute(self, context: Context) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...

class ExternalPythonOperator(_BasePythonVirtualenvOperator):
    template_fields: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute_callable(self): ...

class BranchExternalPythonOperator(ExternalPythonOperator, airflow.operators.branch.BranchMixIn):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def execute(self, context: Context) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
def get_current_context() -> Context: ...
