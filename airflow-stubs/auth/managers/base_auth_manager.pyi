import airflow.utils.log.logging_mixin
import functools
from airflow.auth.managers.models.resource_details import DagDetails as DagDetails
from airflow.exceptions import AirflowException as AirflowException
from airflow.models.dag import DagModel as DagModel
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.session import provide_session as provide_session
from typing import ClassVar, Sequence

TYPE_CHECKING: bool
NEW_SESSION: None

class BaseAuthManager(airflow.utils.log.logging_mixin.LoggingMixin):
    security_manager: ClassVar[functools.cached_property] = ...
    def __init__(self, appbuilder: AirflowAppBuilder) -> None: ...
    @staticmethod
    def get_cli_commands() -> list[CLICommand]: ...
    def get_api_endpoints(self) -> None | FlaskApi: ...
    def get_user_name(self) -> str: ...
    def get_user_display_name(self) -> str: ...
    def get_user(self) -> BaseUser | None: ...
    def get_user_id(self) -> str | None: ...
    def init(self) -> None: ...
    def is_logged_in(self) -> bool: ...
    def is_authorized_configuration(self) -> bool: ...
    def is_authorized_cluster_activity(self) -> bool: ...
    def is_authorized_connection(self) -> bool: ...
    def is_authorized_dag(self) -> bool: ...
    def is_authorized_dataset(self) -> bool: ...
    def is_authorized_pool(self) -> bool: ...
    def is_authorized_variable(self) -> bool: ...
    def is_authorized_view(self) -> bool: ...
    def is_authorized_custom_view(self): ...
    def batch_is_authorized_dag(self, requests: Sequence[IsAuthorizedDagRequest]) -> bool: ...
    def batch_is_authorized_connection(self, requests: Sequence[IsAuthorizedConnectionRequest]) -> bool: ...
    def batch_is_authorized_pool(self, requests: Sequence[IsAuthorizedPoolRequest]) -> bool: ...
    def batch_is_authorized_variable(self, requests: Sequence[IsAuthorizedVariableRequest]) -> bool: ...
    def get_permitted_dag_ids(self, *args, **kwargs) -> set[str]: ...
    def get_url_login(self, **kwargs) -> str: ...
    def get_url_logout(self) -> str: ...
    def get_url_user_profile(self) -> str | None: ...
