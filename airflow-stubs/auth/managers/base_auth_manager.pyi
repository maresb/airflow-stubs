import abc
from _typeshed import Incomplete
from abc import abstractmethod
from airflow.auth.managers.models.base_user import BaseUser as BaseUser
from airflow.auth.managers.models.batch_apis import IsAuthorizedConnectionRequest as IsAuthorizedConnectionRequest, IsAuthorizedDagRequest as IsAuthorizedDagRequest, IsAuthorizedPoolRequest as IsAuthorizedPoolRequest, IsAuthorizedVariableRequest as IsAuthorizedVariableRequest
from airflow.auth.managers.models.resource_details import AccessView as AccessView, ConfigurationDetails as ConfigurationDetails, ConnectionDetails as ConnectionDetails, DagAccessEntity as DagAccessEntity, DagDetails as DagDetails, DatasetDetails as DatasetDetails, PoolDetails as PoolDetails, VariableDetails as VariableDetails
from airflow.cli.cli_config import CLICommand as CLICommand
from airflow.exceptions import AirflowException as AirflowException
from airflow.models import DagModel as DagModel
from airflow.security.permissions import ACTION_CAN_ACCESS_MENU as ACTION_CAN_ACCESS_MENU
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.session import NEW_SESSION as NEW_SESSION, provide_session as provide_session
from airflow.www.extensions.init_appbuilder import AirflowAppBuilder as AirflowAppBuilder
from airflow.www.security_manager import AirflowSecurityManagerV2 as AirflowSecurityManagerV2
from flask import Blueprint as Blueprint
from flask_appbuilder.menu import MenuItem
from functools import cached_property as cached_property
from sqlalchemy.orm import Session as Session
from typing import Container, Sequence

ResourceMethod: Incomplete

class BaseAuthManager(LoggingMixin, metaclass=abc.ABCMeta):
    appbuilder: Incomplete
    def __init__(self, appbuilder: AirflowAppBuilder) -> None: ...
    @staticmethod
    def get_cli_commands() -> list[CLICommand]: ...
    def get_api_endpoints(self) -> None | Blueprint: ...
    def get_user_name(self) -> str: ...
    def get_user_display_name(self) -> str: ...
    @abstractmethod
    def get_user(self) -> BaseUser | None: ...
    def get_user_id(self) -> str | None: ...
    def init(self) -> None: ...
    @abstractmethod
    def is_logged_in(self) -> bool: ...
    @abstractmethod
    def is_authorized_configuration(self, *, method: ResourceMethod, details: ConfigurationDetails | None = None, user: BaseUser | None = None) -> bool: ...
    @abstractmethod
    def is_authorized_connection(self, *, method: ResourceMethod, details: ConnectionDetails | None = None, user: BaseUser | None = None) -> bool: ...
    @abstractmethod
    def is_authorized_dag(self, *, method: ResourceMethod, access_entity: DagAccessEntity | None = None, details: DagDetails | None = None, user: BaseUser | None = None) -> bool: ...
    @abstractmethod
    def is_authorized_dataset(self, *, method: ResourceMethod, details: DatasetDetails | None = None, user: BaseUser | None = None) -> bool: ...
    @abstractmethod
    def is_authorized_pool(self, *, method: ResourceMethod, details: PoolDetails | None = None, user: BaseUser | None = None) -> bool: ...
    @abstractmethod
    def is_authorized_variable(self, *, method: ResourceMethod, details: VariableDetails | None = None, user: BaseUser | None = None) -> bool: ...
    @abstractmethod
    def is_authorized_view(self, *, access_view: AccessView, user: BaseUser | None = None) -> bool: ...
    @abstractmethod
    def is_authorized_custom_view(self, *, method: ResourceMethod | str, resource_name: str, user: BaseUser | None = None): ...
    def batch_is_authorized_connection(self, requests: Sequence[IsAuthorizedConnectionRequest]) -> bool: ...
    def batch_is_authorized_dag(self, requests: Sequence[IsAuthorizedDagRequest]) -> bool: ...
    def batch_is_authorized_pool(self, requests: Sequence[IsAuthorizedPoolRequest]) -> bool: ...
    def batch_is_authorized_variable(self, requests: Sequence[IsAuthorizedVariableRequest]) -> bool: ...
    def get_permitted_dag_ids(self, *, methods: Container[ResourceMethod] | None = None, user: Incomplete | None = None, session: Session = ...) -> set[str]: ...
    def filter_permitted_dag_ids(self, *, dag_ids: set[str], methods: Container[ResourceMethod] | None = None, user: Incomplete | None = None): ...
    def filter_permitted_menu_items(self, menu_items: list[MenuItem]) -> list[MenuItem]: ...
    @abstractmethod
    def get_url_login(self, **kwargs) -> str: ...
    @abstractmethod
    def get_url_logout(self) -> str: ...
    def get_url_user_profile(self) -> str | None: ...
    @cached_property
    def security_manager(self) -> AirflowSecurityManagerV2: ...
