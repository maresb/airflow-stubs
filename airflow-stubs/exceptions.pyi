import datetime
import http
from _typeshed import Incomplete
from airflow.utils.trigger_rule import TriggerRule as TriggerRule
from typing import Any, ClassVar

TYPE_CHECKING: bool

class AirflowException(Exception):
    status_code: ClassVar[http.HTTPStatus] = ...

class AirflowBadRequest(AirflowException):
    status_code: ClassVar[http.HTTPStatus] = ...

class AirflowNotFoundException(AirflowException):
    status_code: ClassVar[http.HTTPStatus] = ...

class AirflowConfigException(AirflowException): ...
class AirflowSensorTimeout(AirflowException): ...

class AirflowRescheduleException(AirflowException):
    def __init__(self, reschedule_date) -> None: ...

class InvalidStatsNameException(AirflowException): ...
class AirflowTaskTimeout(BaseException): ...
class AirflowWebServerTimeout(AirflowException): ...
class AirflowSkipException(AirflowException): ...
class AirflowFailException(AirflowException): ...
class AirflowOptionalProviderFeatureException(AirflowException): ...

class XComNotFound(AirflowException):
    def __init__(self, dag_id: str, task_id: str, key: str) -> None: ...

class UnmappableOperator(AirflowException): ...
class XComForMappingNotPushed(AirflowException): ...

class UnmappableXComTypePushed(AirflowException):
    def __init__(self, value: Any, *values: Any) -> None: ...

class UnmappableXComLengthPushed(AirflowException):
    def __init__(self, value: Sized, max_length: int) -> None: ...

class AirflowDagCycleException(AirflowException): ...

class AirflowDagDuplicatedIdException(AirflowException):
    def __init__(self, dag_id: str, incoming: str, existing: str) -> None: ...

class AirflowDagInconsistent(AirflowException): ...
class AirflowClusterPolicyViolation(AirflowException): ...
class AirflowClusterPolicySkipDag(AirflowException): ...
class AirflowClusterPolicyError(AirflowException): ...
class AirflowTimetableInvalid(AirflowException): ...
class DagNotFound(AirflowNotFoundException): ...
class DagCodeNotFound(AirflowNotFoundException): ...
class DagRunNotFound(AirflowNotFoundException): ...

class DagRunAlreadyExists(AirflowBadRequest):
    def __init__(self, dag_run: DagRun, execution_date: datetime.datetime, run_id: str) -> None: ...

class DagFileExists(AirflowBadRequest):
    def __init__(self, *args, **kwargs) -> None: ...

class FailStopDagInvalidTriggerRule(AirflowException):
    _allowed_rules: ClassVar[tuple] = ...
    @classmethod
    def check(cls): ...

class DuplicateTaskIdFound(AirflowException): ...

class TaskAlreadyInTaskGroup(AirflowException):
    def __init__(self, task_id: str, existing_group_id: str | None, new_group_id: str) -> None: ...

class SerializationError(AirflowException): ...
class ParamValidationError(AirflowException): ...
class TaskNotFound(AirflowNotFoundException): ...
class TaskInstanceNotFound(AirflowNotFoundException): ...
class PoolNotFound(AirflowNotFoundException): ...
class NoAvailablePoolSlot(AirflowException): ...
class DagConcurrencyLimitReached(AirflowException): ...
class TaskConcurrencyLimitReached(AirflowException): ...

class BackfillUnfinished(AirflowException):
    def __init__(self, message, ti_status) -> None: ...

class FileSyntaxError(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    line_no: Incomplete
    message: Incomplete
    def __init__(self, _cls, line_no: int | None, message: str) -> None: ...
    def __getnewargs__(self): ...

class AirflowFileParseException(AirflowException):
    def __init__(self, msg: str, file_path: str, parse_errors: list[FileSyntaxError]) -> None: ...

class ConnectionNotUnique(AirflowException): ...

class TaskDeferred(BaseException):
    def __init__(self) -> None: ...

class TaskDeferralError(AirflowException): ...
class PodMutationHookException(AirflowException): ...
class PodReconciliationError(AirflowException): ...

class RemovedInAirflow3Warning(DeprecationWarning):
    deprecated_since: ClassVar[None] = ...

class AirflowProviderDeprecationWarning(DeprecationWarning):
    deprecated_provider_since: ClassVar[None] = ...

class DeserializingResultError(ValueError): ...
