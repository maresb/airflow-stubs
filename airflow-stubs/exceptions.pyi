import datetime
from _typeshed import Incomplete
from airflow.models import DAG as DAG, DagRun as DagRun
from airflow.providers.cncf.kubernetes.pod_generator import PodMutationHookException as PodMutationHookException, PodReconciliationError as PodReconciliationError
from airflow.utils.trigger_rule import TriggerRule as TriggerRule
from collections.abc import Sized
from typing import Any, NamedTuple

class AirflowException(Exception):
    status_code: Incomplete
    def serialize(self): ...

class AirflowBadRequest(AirflowException):
    status_code: Incomplete

class AirflowNotFoundException(AirflowException):
    status_code: Incomplete

class AirflowConfigException(AirflowException): ...
class AirflowSensorTimeout(AirflowException): ...

class AirflowRescheduleException(AirflowException):
    reschedule_date: Incomplete
    def __init__(self, reschedule_date) -> None: ...
    def serialize(self): ...

class InvalidStatsNameException(AirflowException): ...
class AirflowTaskTimeout(BaseException): ...
class AirflowTaskTerminated(BaseException): ...
class AirflowWebServerTimeout(AirflowException): ...
class AirflowSkipException(AirflowException): ...
class AirflowFailException(AirflowException): ...
class AirflowOptionalProviderFeatureException(AirflowException): ...
class AirflowInternalRuntimeError(BaseException): ...

class XComNotFound(AirflowException):
    dag_id: Incomplete
    task_id: Incomplete
    key: Incomplete
    def __init__(self, dag_id: str, task_id: str, key: str) -> None: ...
    def serialize(self): ...

class UnmappableOperator(AirflowException): ...
class XComForMappingNotPushed(AirflowException): ...

class UnmappableXComTypePushed(AirflowException):
    def __init__(self, value: Any, *values: Any) -> None: ...

class UnmappableXComLengthPushed(AirflowException):
    value: Incomplete
    max_length: Incomplete
    def __init__(self, value: Sized, max_length: int) -> None: ...

class AirflowDagCycleException(AirflowException): ...

class AirflowDagDuplicatedIdException(AirflowException):
    dag_id: Incomplete
    incoming: Incomplete
    existing: Incomplete
    def __init__(self, dag_id: str, incoming: str, existing: str) -> None: ...

class AirflowDagInconsistent(AirflowException): ...
class AirflowClusterPolicyViolation(AirflowException): ...
class AirflowClusterPolicySkipDag(AirflowException): ...
class AirflowClusterPolicyError(AirflowException): ...
class AirflowTimetableInvalid(AirflowException): ...
class DagNotFound(AirflowNotFoundException): ...
class DagCodeNotFound(AirflowNotFoundException): ...
class DagRunNotFound(AirflowNotFoundException): ...

class DagRunAlreadyExists(AirflowBadRequest):
    dag_run: Incomplete
    execution_date: Incomplete
    run_id: Incomplete
    def __init__(self, dag_run: DagRun, execution_date: datetime.datetime, run_id: str) -> None: ...
    def serialize(self): ...

class DagFileExists(AirflowBadRequest):
    def __init__(self, *args, **kwargs) -> None: ...

class FailStopDagInvalidTriggerRule(AirflowException):
    @classmethod
    def check(cls, *, dag: DAG | None, trigger_rule: TriggerRule): ...

class DuplicateTaskIdFound(AirflowException): ...

class TaskAlreadyInTaskGroup(AirflowException):
    task_id: Incomplete
    existing_group_id: Incomplete
    new_group_id: Incomplete
    def __init__(self, task_id: str, existing_group_id: str | None, new_group_id: str) -> None: ...

class SerializationError(AirflowException): ...
class ParamValidationError(AirflowException): ...
class TaskNotFound(AirflowNotFoundException): ...
class TaskInstanceNotFound(AirflowNotFoundException): ...
class PoolNotFound(AirflowNotFoundException): ...
class NoAvailablePoolSlot(AirflowException): ...
class DagConcurrencyLimitReached(AirflowException): ...
class TaskConcurrencyLimitReached(AirflowException): ...

class BackfillUnfinished(AirflowException):
    ti_status: Incomplete
    def __init__(self, message, ti_status) -> None: ...

class FileSyntaxError(NamedTuple):
    line_no: int | None
    message: str

class AirflowFileParseException(AirflowException):
    msg: Incomplete
    file_path: Incomplete
    parse_errors: Incomplete
    def __init__(self, msg: str, file_path: str, parse_errors: list[FileSyntaxError]) -> None: ...

class ConnectionNotUnique(AirflowException): ...

class TaskDeferred(BaseException):
    trigger: Incomplete
    method_name: Incomplete
    kwargs: Incomplete
    timeout: Incomplete
    def __init__(self, *, trigger, method_name: str, kwargs: dict[str, Any] | None = None, timeout: datetime.timedelta | None = None) -> None: ...
    def serialize(self): ...

class TaskDeferralError(AirflowException): ...
class PodMutationHookException(AirflowException): ...
class PodReconciliationError(AirflowException): ...

class RemovedInAirflow3Warning(DeprecationWarning):
    deprecated_since: str | None

class AirflowProviderDeprecationWarning(DeprecationWarning):
    deprecated_provider_since: str | None

class DeserializingResultError(ValueError): ...
class UnknownExecutorException(ValueError): ...
