from _typeshed import Incomplete
from airflow import settings as settings
from airflow.api.client import get_current_api_client as get_current_api_client
from airflow.api_connexion.schemas.dag_schema import dag_schema as dag_schema
from airflow.cli.simple_table import AirflowConsole as AirflowConsole
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.jobs.job import Job as Job
from airflow.models import DagBag as DagBag, DagModel as DagModel, DagRun as DagRun, TaskInstance as TaskInstance
from airflow.models.dag import DAG as DAG
from airflow.models.serialized_dag import SerializedDagModel as SerializedDagModel
from airflow.timetables.base import DataInterval as DataInterval
from airflow.utils import timezone as timezone
from airflow.utils.cli import get_dag as get_dag, get_dags as get_dags, process_subdir as process_subdir, sigint_handler as sigint_handler, suppress_logs_and_warning as suppress_logs_and_warning
from airflow.utils.dot_renderer import render_dag as render_dag, render_dag_dependencies as render_dag_dependencies
from airflow.utils.helpers import ask_yesno as ask_yesno
from airflow.utils.providers_configuration_loader import providers_configuration_loaded as providers_configuration_loaded
from airflow.utils.session import NEW_SESSION as NEW_SESSION, create_session as create_session, provide_session as provide_session
from airflow.utils.state import DagRunState as DagRunState
from graphviz.dot import Dot as Dot
from sqlalchemy.orm import Session as Session

log: Incomplete

def dag_backfill(args, dag: list[DAG] | DAG | None = None) -> None: ...
def dag_trigger(args) -> None: ...
def dag_delete(args) -> None: ...
def dag_pause(args) -> None: ...
def dag_unpause(args) -> None: ...
def set_is_paused(is_paused: bool, args) -> None: ...
def dag_dependencies_show(args) -> None: ...
def dag_show(args) -> None: ...
def dag_state(args, session: Session = ...) -> None: ...
def dag_next_execution(args) -> None: ...
def dag_list_dags(args, session=...) -> None: ...
def dag_details(args, session=...) -> None: ...
def dag_list_import_errors(args) -> None: ...
def dag_report(args) -> None: ...
def dag_list_jobs(args, dag: DAG | None = None, session: Session = ...) -> None: ...
def dag_list_dag_runs(args, dag: DAG | None = None, session: Session = ...) -> None: ...
def dag_test(args, dag: DAG | None = None, session: Session = ...) -> None: ...
def dag_reserialize(args, session: Session = ...) -> None: ...
