import airflow.settings as settings
import airflow.utils.cli as cli_utils
import airflow.utils.timezone as timezone
import logging
import types
import typing
from airflow.cli.simple_table import AirflowConsole as AirflowConsole
from airflow.configuration import conf as conf
from airflow.exceptions import AirflowException as AirflowException, DagRunNotFound as DagRunNotFound, TaskInstanceNotFound as TaskInstanceNotFound
from airflow.executors.executor_loader import ExecutorLoader as ExecutorLoader
from airflow.jobs.job import Job as Job, run_job as run_job
from airflow.jobs.local_task_job_runner import LocalTaskJobRunner as LocalTaskJobRunner
from airflow.listeners.listener import get_listener_manager as get_listener_manager
from airflow.models.dag import DAG as DAG
from airflow.models.dagpickle import DagPickle as DagPickle
from airflow.models.dagrun import DagRun as DagRun
from airflow.models.operator import needs_expansion as needs_expansion
from airflow.models.param import ParamsDict as ParamsDict
from airflow.models.taskinstance import TaskInstance as TaskInstance, TaskReturnCode as TaskReturnCode
from airflow.serialization.pydantic.taskinstance import TaskInstancePydantic as TaskInstancePydantic
from airflow.ti_deps.dep_context import DepContext as DepContext
from airflow.utils.cli import get_dag as get_dag, get_dag_by_file_location as get_dag_by_file_location, get_dag_by_pickle as get_dag_by_pickle, get_dags as get_dags, should_ignore_depends_on_past as should_ignore_depends_on_past, suppress_logs_and_warning as suppress_logs_and_warning
from airflow.utils.log.logging_mixin import StreamLogWriter as StreamLogWriter
from airflow.utils.log.secrets_masker import RedactedIO as RedactedIO
from airflow.utils.net import get_hostname as get_hostname
from airflow.utils.providers_configuration_loader import providers_configuration_loaded as providers_configuration_loaded
from airflow.utils.session import create_session as create_session, provide_session as provide_session
from airflow.utils.state import DagRunState as DagRunState
from airflow.utils.task_instance_session import set_current_task_instance_session as set_current_task_instance_session
from typing import ClassVar

TYPE_CHECKING: bool
IS_EXECUTOR_CONTAINER: bool
IS_K8S_EXECUTOR_POD: bool
SCHEDULER_QUEUED_DEPS: set
NEW_SESSION: None
RAW_TASK_UNSUPPORTED_OPTION: list

class TaskCommandMarker: ...
def task_run(*args, **kwargs) -> TaskReturnCode | None: ...
def task_failed_deps(*args, **kwargs) -> None: ...
def task_state(*args, **kwargs) -> None: ...
def task_list(*args, **kwargs) -> None: ...

class _SupportedDebugger(typing.Protocol):
    __parameters__: ClassVar[tuple] = ...
    _is_protocol: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def post_mortem(self) -> None: ...
    def __subclasshook__(self, other): ...
    def __init__(self, *args, **kwargs) -> None: ...
SUPPORTED_DEBUGGER_MODULES: list
def task_states_for_dag_run(*args, **kwargs) -> None: ...
def task_test(*args, **kwargs) -> None: ...
def task_render(*args, **kwargs) -> None: ...
def task_clear(*args, **kwargs) -> None: ...

class LoggerMutationHelper:
    def __init__(self, logger: logging.Logger) -> None: ...
    def apply(self, logger: logging.Logger, replace: bool = ...) -> None: ...
    def move(self, logger: logging.Logger, replace: bool = ...) -> None: ...
    def reset(self) -> None: ...
    def __enter__(self) -> LoggerMutationHelper: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...
