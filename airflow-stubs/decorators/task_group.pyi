import attr
from _typeshed import Incomplete
from airflow.decorators.base import ExpandableFactory as ExpandableFactory
from airflow.models.dag import DAG as DAG
from airflow.models.expandinput import DictOfListsExpandInput as DictOfListsExpandInput, ListOfDictsExpandInput as ListOfDictsExpandInput, MappedArgument as MappedArgument, OperatorExpandArgument as OperatorExpandArgument, OperatorExpandKwargsArgument as OperatorExpandKwargsArgument
from airflow.models.taskmixin import DAGNode as DAGNode
from airflow.models.xcom_arg import XComArg as XComArg
from airflow.typing_compat import ParamSpec as ParamSpec
from airflow.utils.helpers import prevent_duplicates as prevent_duplicates
from airflow.utils.task_group import MappedTaskGroup as MappedTaskGroup, TaskGroup as TaskGroup
from typing import Any, Callable, ClassVar, Generic, TypeVar, overload

FParams = ParamSpec('FParams')
FReturn = TypeVar('FReturn', None, DAGNode)
task_group_sig: Incomplete

@attr.define()
class _TaskGroupFactory(ExpandableFactory, Generic[FParams, FReturn]):
    function: Callable[FParams, FReturn] = ...
    tg_kwargs: dict[str, Any] = ...
    partial_kwargs: dict[str, Any] = ...
    tg_class: ClassVar[type[TaskGroup]] = ...
    def __attrs_post_init__(self) -> None: ...
    def __del__(self) -> None: ...
    def __call__(self, *args: FParams.args, **kwargs: FParams.kwargs) -> DAGNode: ...
    def override(self, **kwargs: Any) -> _TaskGroupFactory[FParams, FReturn]: ...
    def partial(self, **kwargs: Any) -> _TaskGroupFactory[FParams, FReturn]: ...
    def expand(self, **kwargs: OperatorExpandArgument) -> DAGNode: ...
    def expand_kwargs(self, kwargs: OperatorExpandKwargsArgument) -> DAGNode: ...

@overload
def task_group(group_id: str | None = None, prefix_group_id: bool = True, parent_group: TaskGroup | None = None, dag: DAG | None = None, default_args: dict[str, Any] | None = None, tooltip: str = '', ui_color: str = 'CornflowerBlue', ui_fgcolor: str = '#000', add_suffix_on_collision: bool = False) -> Callable[[Callable[FParams, FReturn]], _TaskGroupFactory[FParams, FReturn]]: ...
@overload
def task_group(python_callable: Callable[FParams, FReturn]) -> _TaskGroupFactory[FParams, FReturn]: ...
