import FParams
import airflow.decorators.base
import airflow.utils.task_group
import typing
import typing_extensions
from _typeshed import Incomplete
from airflow.decorators.base import ExpandableFactory as ExpandableFactory
from airflow.models.expandinput import DictOfListsExpandInput as DictOfListsExpandInput, ListOfDictsExpandInput as ListOfDictsExpandInput, MappedArgument as MappedArgument
from airflow.models.taskmixin import DAGNode as DAGNode
from airflow.models.xcom_arg import XComArg as XComArg
from airflow.utils.helpers import prevent_duplicates as prevent_duplicates
from airflow.utils.task_group import MappedTaskGroup as MappedTaskGroup, TaskGroup as TaskGroup
from typing import Any, Callable, ClassVar as _ClassVar

TYPE_CHECKING: bool
FParams: typing_extensions.ParamSpec
FReturn: typing.TypeVar

class _TaskGroupFactory(airflow.decorators.base.ExpandableFactory):
    tg_class: _ClassVar[type[airflow.utils.task_group.TaskGroup]] = ...
    __orig_bases__: _ClassVar[tuple] = ...
    __parameters__: _ClassVar[tuple] = ...
    _is_protocol: _ClassVar[bool] = ...
    __abstractmethods__: _ClassVar[frozenset] = ...
    _abc_impl: _ClassVar[_abc_data] = ...
    __attrs_attrs__: _ClassVar[_TaskGroupFactoryAttributes] = ...
    __attrs_own_setattr__: _ClassVar[bool] = ...
    function: Incomplete
    partial_kwargs: Incomplete
    tg_kwargs: Incomplete
    def __attrs_post_init__(self): ...
    def __del__(self) -> None: ...
    def __call__(self, *args: FParams.args, **kwargs: FParams.kwargs) -> DAGNode: ...
    def override(self, **kwargs: Any) -> _TaskGroupFactory[FParams, FReturn]: ...
    def partial(self, **kwargs: Any) -> _TaskGroupFactory[FParams, FReturn]: ...
    def expand(self, **kwargs: OperatorExpandArgument) -> DAGNode: ...
    def expand_kwargs(self, kwargs: OperatorExpandKwargsArgument) -> DAGNode: ...
    def __subclasshook__(self, other): ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __setattr__(self, name, val): ...
    def __init__(self, function: Callable[FParams, FReturn], tg_kwargs: dict[str, Any] = ..., partial_kwargs: dict[str, Any] = ...) -> None: ...
def task_group(python_callable: Incomplete | None = ..., **tg_kwargs): ...
