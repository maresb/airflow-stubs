import airflow.sensors.python
from airflow.decorators.base import get_unique_task_id as get_unique_task_id, task_decorator_factory as task_decorator_factory
from airflow.sensors.python import PythonSensor as PythonSensor
from typing import Callable, ClassVar

TYPE_CHECKING: bool

class DecoratedSensorOperator(airflow.sensors.python.PythonSensor):
    template_fields: ClassVar[tuple] = ...
    template_fields_renderers: ClassVar[dict] = ...
    custom_operator_name: ClassVar[str] = ...
    shallow_copy_attrs: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
def sensor_task(python_callable: Callable | None = ..., **kwargs) -> TaskDecorator: ...
