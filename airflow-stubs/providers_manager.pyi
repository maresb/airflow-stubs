from _typeshed import Incomplete
from airflow.datasets import Dataset as Dataset
from airflow.decorators.base import TaskDecorator as TaskDecorator
from airflow.exceptions import AirflowOptionalProviderFeatureException as AirflowOptionalProviderFeatureException
from airflow.hooks.base import BaseHook as BaseHook
from airflow.hooks.filesystem import FSHook as FSHook
from airflow.hooks.package_index import PackageIndexHook as PackageIndexHook
from airflow.typing_compat import Literal as Literal, ParamSpec as ParamSpec
from airflow.utils import yaml as yaml
from airflow.utils.entry_points import entry_points_with_dist as entry_points_with_dist
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.module_loading import import_string as import_string
from airflow.utils.singleton import Singleton as Singleton
from dataclasses import dataclass
from typing import Any, Callable, MutableMapping, NamedTuple, NoReturn, TypeVar
from urllib.parse import SplitResult as SplitResult

log: Incomplete
PS = ParamSpec('PS')
RT = TypeVar('RT')
MIN_PROVIDER_VERSIONS: Incomplete

class LazyDictWithCache(MutableMapping):
    def __init__(self, *args, **kw) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...
    def clear(self) -> None: ...

@dataclass
class ProviderInfo:
    version: str
    data: dict
    package_or_source: Literal['source'] | Literal['package']
    is_source = ...
    def __post_init__(self) -> None: ...

class HookClassProvider(NamedTuple):
    hook_class_name: str
    package_name: str

class TriggerInfo(NamedTuple):
    trigger_class_name: str
    package_name: str
    integration_name: str

class NotificationInfo(NamedTuple):
    notification_class_name: str
    package_name: str

class PluginInfo(NamedTuple):
    name: str
    plugin_class: str
    provider_name: str

class HookInfo(NamedTuple):
    hook_class_name: str
    connection_id_attribute_name: str
    package_name: str
    hook_name: str
    connection_type: str
    connection_testable: bool

class ConnectionFormWidgetInfo(NamedTuple):
    hook_class_name: str
    package_name: str
    field: Any
    field_name: str
    is_sensitive: bool

def log_debug_import_from_sources(class_name, e, provider_package) -> None: ...
def log_optional_feature_disabled(class_name, e, provider_package) -> None: ...
def log_import_warning(class_name, e, provider_package) -> None: ...

KNOWN_UNHANDLED_OPTIONAL_FEATURE_ERRORS: Incomplete

def provider_info_cache(cache_name: str) -> Callable[[Callable[PS, NoReturn]], Callable[PS, None]]: ...

class ProvidersManager(LoggingMixin, metaclass=Singleton):
    resource_version: str
    @staticmethod
    def initialized() -> bool: ...
    @staticmethod
    def initialization_stack_trace() -> str | None: ...
    def __init__(self) -> None: ...
    def initialize_providers_list(self) -> None: ...
    def initialize_providers_hooks(self) -> None: ...
    def initialize_providers_filesystems(self) -> None: ...
    def initialize_providers_dataset_uri_resources(self) -> None: ...
    def initialize_providers_taskflow_decorator(self) -> None: ...
    def initialize_providers_extra_links(self) -> None: ...
    def initialize_providers_logging(self) -> None: ...
    def initialize_providers_secrets_backends(self) -> None: ...
    def initialize_providers_executors(self) -> None: ...
    def initialize_providers_notifications(self) -> None: ...
    def initialize_providers_auth_managers(self) -> None: ...
    def initialize_providers_configuration(self) -> None: ...
    def initialize_providers_auth_backends(self) -> None: ...
    def initialize_providers_plugins(self) -> None: ...
    def initialize_providers_triggers(self) -> None: ...
    @property
    def auth_managers(self) -> list[str]: ...
    @property
    def notification(self) -> list[NotificationInfo]: ...
    @property
    def trigger(self) -> list[TriggerInfo]: ...
    @property
    def providers(self) -> dict[str, ProviderInfo]: ...
    @property
    def hooks(self) -> MutableMapping[str, HookInfo | None]: ...
    @property
    def plugins(self) -> list[PluginInfo]: ...
    @property
    def taskflow_decorators(self) -> dict[str, TaskDecorator]: ...
    @property
    def extra_links_class_names(self) -> list[str]: ...
    @property
    def connection_form_widgets(self) -> dict[str, ConnectionFormWidgetInfo]: ...
    @property
    def field_behaviours(self) -> dict[str, dict]: ...
    @property
    def logging_class_names(self) -> list[str]: ...
    @property
    def secrets_backend_class_names(self) -> list[str]: ...
    @property
    def auth_backend_module_names(self) -> list[str]: ...
    @property
    def executor_class_names(self) -> list[str]: ...
    @property
    def filesystem_module_names(self) -> list[str]: ...
    @property
    def dataset_factories(self) -> dict[str, Callable[..., Dataset]]: ...
    @property
    def dataset_uri_handlers(self) -> dict[str, Callable[[SplitResult], SplitResult]]: ...
    @property
    def dataset_to_openlineage_converters(self) -> dict[str, Callable]: ...
    @property
    def provider_configs(self) -> list[tuple[str, dict[str, Any]]]: ...
    @property
    def already_initialized_provider_configs(self) -> list[tuple[str, dict[str, Any]]]: ...
