import airflow.utils.log.logging_mixin
import airflow.utils.yaml as yaml
import collections.abc
import dataclasses
import typing
from _typeshed import Incomplete
from airflow.exceptions import AirflowOptionalProviderFeatureException as AirflowOptionalProviderFeatureException
from airflow.hooks.filesystem import FSHook as FSHook
from airflow.hooks.package_index import PackageIndexHook as PackageIndexHook
from airflow.utils.entry_points import entry_points_with_dist as entry_points_with_dist
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.module_loading import import_string as import_string
from airflow.utils.singleton import Singleton as Singleton
from typing import Any, Callable, ClassVar

TYPE_CHECKING: bool
MIN_PROVIDER_VERSIONS: dict

class LazyDictWithCache(collections.abc.MutableMapping, typing.Generic):
    __orig_bases__: ClassVar[tuple] = ...
    __parameters__: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kw) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...

class ProviderInfo:
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __dataclass_fields__: ClassVar[dict] = ...
    def __post_init__(self): ...
    def __init__(self, version: str, data: dict, package_or_source: Literal['source'] | Literal['package']) -> None: ...
    def __eq__(self, other) -> bool: ...

class HookClassProvider(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    hook_class_name: Incomplete
    package_name: Incomplete
    def __init__(self, _cls, hook_class_name: str, package_name: str) -> None: ...
    def __getnewargs__(self): ...

class TriggerInfo(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    trigger_class_name: Incomplete
    package_name: Incomplete
    integration_name: Incomplete
    def __init__(self, _cls, trigger_class_name: str, package_name: str, integration_name: str) -> None: ...
    def __getnewargs__(self): ...

class NotificationInfo(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    notification_class_name: Incomplete
    package_name: Incomplete
    def __init__(self, _cls, notification_class_name: str, package_name: str) -> None: ...
    def __getnewargs__(self): ...

class PluginInfo(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    name: Incomplete
    plugin_class: Incomplete
    provider_name: Incomplete
    def __init__(self, _cls, name: str, plugin_class: str, provider_name: str) -> None: ...
    def __getnewargs__(self): ...

class HookInfo(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    hook_class_name: Incomplete
    connection_id_attribute_name: Incomplete
    package_name: Incomplete
    hook_name: Incomplete
    connection_type: Incomplete
    connection_testable: Incomplete
    def __init__(self, _cls, hook_class_name: str, connection_id_attribute_name: str, package_name: str, hook_name: str, connection_type: str, connection_testable: bool) -> None: ...
    def __getnewargs__(self): ...

class ConnectionFormWidgetInfo(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    hook_class_name: Incomplete
    package_name: Incomplete
    field: Incomplete
    field_name: Incomplete
    is_sensitive: Incomplete
    def __init__(self, _cls, hook_class_name: str, package_name: str, field: Any, field_name: str, is_sensitive: bool) -> None: ...
    def __getnewargs__(self): ...
T: typing.TypeVar
def log_debug_import_from_sources(class_name, e, provider_package): ...
def log_optional_feature_disabled(class_name, e, provider_package): ...
def log_import_warning(class_name, e, provider_package): ...

KNOWN_UNHANDLED_OPTIONAL_FEATURE_ERRORS: list
def provider_info_cache(cache_name: str) -> Callable[[T], T]: ...

class ProvidersManager(airflow.utils.log.logging_mixin.LoggingMixin):
    resource_version: ClassVar[str] = ...
    _initialized: ClassVar[bool] = ...
    _initialization_stack_trace: ClassVar[None] = ...
    @staticmethod
    def initialized() -> bool: ...
    @staticmethod
    def initialization_stack_trace() -> str | None: ...
    def __init__(self) -> None: ...
    def initialize_providers_list(self, *args, **kwargs): ...
    def initialize_providers_hooks(self, *args, **kwargs): ...
    def initialize_providers_filesystems(self, *args, **kwargs): ...
    def initialize_providers_taskflow_decorator(self, *args, **kwargs): ...
    def initialize_providers_extra_links(self, *args, **kwargs): ...
    def initialize_providers_logging(self, *args, **kwargs): ...
    def initialize_providers_secrets_backends(self, *args, **kwargs): ...
    def initialize_providers_executors(self, *args, **kwargs): ...
    def initialize_providers_notifications(self, *args, **kwargs): ...
    def initialize_providers_configuration(self, *args, **kwargs): ...
    def initialize_providers_auth_backends(self, *args, **kwargs): ...
    def initialize_providers_plugins(self, *args, **kwargs): ...
    def initialize_providers_triggers(self, *args, **kwargs): ...
    @property
    def notification(self): ...
    @property
    def trigger(self): ...
    @property
    def providers(self): ...
    @property
    def hooks(self): ...
    @property
    def plugins(self): ...
    @property
    def taskflow_decorators(self): ...
    @property
    def extra_links_class_names(self): ...
    @property
    def connection_form_widgets(self): ...
    @property
    def field_behaviours(self): ...
    @property
    def logging_class_names(self): ...
    @property
    def secrets_backend_class_names(self): ...
    @property
    def auth_backend_module_names(self): ...
    @property
    def executor_class_names(self): ...
    @property
    def filesystem_module_names(self): ...
    @property
    def provider_configs(self): ...
    @property
    def already_initialized_provider_configs(self): ...
