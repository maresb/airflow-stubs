import typing
from airflow.api_connexion.exceptions import PermissionDenied as PermissionDenied, Unauthenticated as Unauthenticated
from airflow.auth.managers.models.resource_details import AccessView as AccessView, ConfigurationDetails as ConfigurationDetails, ConnectionDetails as ConnectionDetails, DagAccessEntity as DagAccessEntity, DagDetails as DagDetails, DatasetDetails as DatasetDetails, PoolDetails as PoolDetails, VariableDetails as VariableDetails
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.utils.airflow_flask_app import get_airflow_app as get_airflow_app
from airflow.www.extensions.init_auth_manager import get_auth_manager as get_auth_manager
from typing import Callable, Sequence

TYPE_CHECKING: bool
T: typing.TypeVar
def check_authentication() -> None: ...
def requires_access(permissions: Sequence[tuple[str, str]] | None = ...) -> Callable[[T], T]: ...
def requires_access_configuration(method: ResourceMethod) -> Callable[[T], T]: ...
def requires_access_connection(method: ResourceMethod) -> Callable[[T], T]: ...
def requires_access_dag(method: ResourceMethod, access_entity: DagAccessEntity | None = ...) -> Callable[[T], T]: ...
def requires_access_dataset(method: ResourceMethod) -> Callable[[T], T]: ...
def requires_access_pool(method: ResourceMethod) -> Callable[[T], T]: ...
def requires_access_variable(method: ResourceMethod) -> Callable[[T], T]: ...
def requires_access_view(access_view: AccessView) -> Callable[[T], T]: ...
def requires_access_custom_view(fab_action_name: str, fab_resource_name: str) -> Callable[[T], T]: ...
def get_readable_dags() -> set[str]: ...
