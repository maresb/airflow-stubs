from airflow.api_connexion import security as security
from airflow.api_connexion.endpoints.request_dict import get_json_request_dict as get_json_request_dict
from airflow.api_connexion.exceptions import BadRequest as BadRequest, NotFound as NotFound, PermissionDenied as PermissionDenied
from airflow.api_connexion.parameters import format_datetime as format_datetime, format_parameters as format_parameters
from airflow.api_connexion.schemas.task_instance_schema import TaskInstanceCollection as TaskInstanceCollection, TaskInstanceHistoryCollection as TaskInstanceHistoryCollection, TaskInstanceReferenceCollection as TaskInstanceReferenceCollection, clear_task_instance_form as clear_task_instance_form, set_single_task_instance_state_form as set_single_task_instance_state_form, set_task_instance_note_form_schema as set_task_instance_note_form_schema, set_task_instance_state_form as set_task_instance_state_form, task_dependencies_collection_schema as task_dependencies_collection_schema, task_instance_batch_form as task_instance_batch_form, task_instance_collection_schema as task_instance_collection_schema, task_instance_history_collection_schema as task_instance_history_collection_schema, task_instance_history_schema as task_instance_history_schema, task_instance_reference_collection_schema as task_instance_reference_collection_schema, task_instance_reference_schema as task_instance_reference_schema, task_instance_schema as task_instance_schema
from airflow.api_connexion.security import get_readable_dags as get_readable_dags
from airflow.api_connexion.types import APIResponse as APIResponse
from airflow.auth.managers.models.batch_apis import IsAuthorizedDagRequest as IsAuthorizedDagRequest
from airflow.auth.managers.models.resource_details import DagAccessEntity as DagAccessEntity, DagDetails as DagDetails
from airflow.exceptions import TaskNotFound as TaskNotFound
from airflow.models import SlaMiss as SlaMiss
from airflow.models.taskinstance import clear_task_instances as clear_task_instances
from airflow.utils.airflow_flask_app import get_airflow_app as get_airflow_app
from airflow.utils.db import get_query_count as get_query_count
from airflow.utils.session import NEW_SESSION as NEW_SESSION, provide_session as provide_session
from airflow.utils.state import DagRunState as DagRunState, TaskInstanceState as TaskInstanceState
from airflow.www.decorators import action_logging as action_logging
from airflow.www.extensions.init_auth_manager import get_auth_manager as get_auth_manager
from sqlalchemy.orm import Session as Session
from sqlalchemy.sql import ClauseElement as ClauseElement, Select as Select
from typing import TypeVar

T = TypeVar('T')

def get_task_instance(*, dag_id: str, dag_run_id: str, task_id: str, session: Session = ...) -> APIResponse: ...
def get_mapped_task_instance(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int, session: Session = ...) -> APIResponse: ...
def get_mapped_task_instances(*, dag_id: str, dag_run_id: str, task_id: str, execution_date_gte: str | None = None, execution_date_lte: str | None = None, start_date_gte: str | None = None, start_date_lte: str | None = None, end_date_gte: str | None = None, end_date_lte: str | None = None, updated_at_gte: str | None = None, updated_at_lte: str | None = None, duration_gte: float | None = None, duration_lte: float | None = None, state: list[str] | None = None, pool: list[str] | None = None, queue: list[str] | None = None, executor: list[str] | None = None, limit: int | None = None, offset: int | None = None, order_by: str | None = None, session: Session = ...) -> APIResponse: ...
def get_task_instances(*, limit: int, dag_id: str | None = None, dag_run_id: str | None = None, execution_date_gte: str | None = None, execution_date_lte: str | None = None, start_date_gte: str | None = None, start_date_lte: str | None = None, end_date_gte: str | None = None, end_date_lte: str | None = None, updated_at_gte: str | None = None, updated_at_lte: str | None = None, duration_gte: float | None = None, duration_lte: float | None = None, state: list[str] | None = None, pool: list[str] | None = None, queue: list[str] | None = None, executor: list[str] | None = None, offset: int | None = None, session: Session = ...) -> APIResponse: ...
def get_task_instances_batch(session: Session = ...) -> APIResponse: ...
def post_clear_task_instances(*, dag_id: str, session: Session = ...) -> APIResponse: ...
def post_set_task_instances_state(*, dag_id: str, session: Session = ...) -> APIResponse: ...
def set_mapped_task_instance_note(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int) -> APIResponse: ...
def patch_task_instance(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int = -1, session: Session = ...) -> APIResponse: ...
def patch_mapped_task_instance(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int, session: Session = ...) -> APIResponse: ...
def set_task_instance_note(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int = -1, session: Session = ...) -> APIResponse: ...
def get_task_instance_dependencies(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int = -1, session: Session = ...) -> APIResponse: ...
def get_mapped_task_instance_dependencies(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int) -> APIResponse: ...
def get_task_instance_try_details(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, map_index: int = -1, session: Session = ...) -> APIResponse: ...
def get_mapped_task_instance_try_details(*, dag_id: str, dag_run_id: str, task_id: str, task_try_number: int, map_index: int, session: Session = ...) -> APIResponse: ...
def get_task_instance_tries(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int = -1, session: Session = ...) -> APIResponse: ...
def get_mapped_task_instance_tries(*, dag_id: str, dag_run_id: str, task_id: str, map_index: int, session: Session = ...) -> APIResponse: ...
