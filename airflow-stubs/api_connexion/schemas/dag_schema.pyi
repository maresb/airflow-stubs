import airflow.models.dag
import collections
import marshmallow.schema
import marshmallow_sqlalchemy.schema
from _typeshed import Incomplete
from airflow.api_connexion.schemas.common_schema import ScheduleIntervalSchema as ScheduleIntervalSchema, TimeDeltaSchema as TimeDeltaSchema, TimezoneField as TimezoneField
from airflow.configuration import conf as conf
from airflow.models.dag import DagModel as DagModel, DagTag as DagTag
from typing import ClassVar

TYPE_CHECKING: bool

class DagTagSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.models.dag.DagTag]] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class DAGSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.models.dag.DagModel]] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    @staticmethod
    def get_owners(obj: DagModel): ...
    @staticmethod
    def get_token(obj: DagModel): ...

class DAGDetailSchema(DAGSchema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    @staticmethod
    def get_concurrency(obj: DAG): ...
    @staticmethod
    def get_tags(obj: DAG): ...
    @staticmethod
    def get_owners(obj: DAG): ...
    @staticmethod
    def get_is_paused(obj: DAG): ...
    @staticmethod
    def get_is_active(obj: DAG): ...
    @staticmethod
    def get_params(obj: DAG): ...

class DAGCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    dags: Incomplete
    total_entries: Incomplete
    def __init__(self, _cls, dags: list[DagModel], total_entries: int) -> None: ...
    def __getnewargs__(self): ...

class DAGCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
dags_collection_schema: DAGCollectionSchema
dag_schema: DAGSchema
dag_detail_schema: DAGDetailSchema
