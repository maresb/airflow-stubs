import airflow.models.dagrun
import airflow.utils.timezone as timezone
import collections
import marshmallow.fields
import marshmallow.schema
import marshmallow_sqlalchemy.schema
from _typeshed import Incomplete
from airflow.api_connexion.exceptions import BadRequest as BadRequest
from airflow.api_connexion.parameters import validate_istimezone as validate_istimezone
from airflow.api_connexion.schemas.enum_schemas import DagStateField as DagStateField
from airflow.models.dagrun import DagRun as DagRun
from airflow.utils.state import DagRunState as DagRunState
from airflow.utils.types import DagRunType as DagRunType
from typing import ClassVar

class ConfObject(marshmallow.fields.Field):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __slotnames__: ClassVar[list] = ...

class DAGRunSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.models.dagrun.DagRun]] = ...
        dateformat: ClassVar[str] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def autogenerate(self, data, **kwargs): ...
    def autofill(self, data, **kwargs): ...

class SetDagRunStateFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class ClearDagRunStateFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class DAGRunCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    dag_runs: Incomplete
    total_entries: Incomplete
    def __init__(self, _cls, dag_runs: list[DagRun], total_entries: int) -> None: ...
    def __getnewargs__(self): ...

class DAGRunCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class DagRunsBatchFormSchema(marshmallow.schema.Schema):
    class Meta:
        datetimeformat: ClassVar[str] = ...
        strict: ClassVar[bool] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class SetDagRunNoteFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
dagrun_schema: DAGRunSchema
dagrun_collection_schema: DAGRunCollectionSchema
set_dagrun_state_form_schema: SetDagRunStateFormSchema
clear_dagrun_form_schema: ClearDagRunStateFormSchema
dagruns_batch_form_schema: DagRunsBatchFormSchema
set_dagrun_note_form_schema: SetDagRunNoteFormSchema
