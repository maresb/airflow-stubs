import airflow.auth.managers.fab.models
import collections
import marshmallow.schema
import marshmallow_sqlalchemy.schema
from _typeshed import Incomplete
from airflow.api_connexion.parameters import validate_istimezone as validate_istimezone
from airflow.api_connexion.schemas.role_and_permission_schema import RoleSchema as RoleSchema
from airflow.auth.managers.fab.models import User as User
from typing import ClassVar

class UserCollectionItemSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.auth.managers.fab.models.User]] = ...
        dateformat: ClassVar[str] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class UserSchema(UserCollectionItemSchema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class UserCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    users: Incomplete
    total_entries: Incomplete
    def __init__(self, _cls, users: list[User], total_entries: int) -> None: ...
    def __getnewargs__(self): ...

class UserCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
user_collection_item_schema: UserCollectionItemSchema
user_schema: UserSchema
user_collection_schema: UserCollectionSchema
