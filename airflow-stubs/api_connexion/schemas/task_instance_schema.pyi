import airflow.models.taskinstance
import collections
import marshmallow.schema
import marshmallow_sqlalchemy.schema
from _typeshed import Incomplete
from airflow.api_connexion.parameters import validate_istimezone as validate_istimezone
from airflow.api_connexion.schemas.common_schema import JsonObjectField as JsonObjectField
from airflow.api_connexion.schemas.enum_schemas import TaskInstanceStateField as TaskInstanceStateField
from airflow.api_connexion.schemas.job_schema import JobSchema as JobSchema
from airflow.api_connexion.schemas.sla_miss_schema import SlaMissSchema as SlaMissSchema
from airflow.api_connexion.schemas.trigger_schema import TriggerSchema as TriggerSchema
from airflow.models.taskinstance import TaskInstance as TaskInstance
from airflow.utils.helpers import exactly_one as exactly_one
from airflow.utils.state import TaskInstanceState as TaskInstanceState
from typing import ClassVar

TYPE_CHECKING: bool

class TaskInstanceSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.models.taskinstance.TaskInstance]] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def get_attribute(self, obj, attr, default): ...

class TaskInstanceCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    task_instances: Incomplete
    total_entries: Incomplete
    def __init__(self, _cls, task_instances: list[tuple[TaskInstance, SlaMiss | None]], total_entries: int) -> None: ...
    def __getnewargs__(self): ...

class TaskInstanceCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class TaskInstanceBatchFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class ClearTaskInstanceFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def validate_form(self, data, **kwargs): ...

class SetTaskInstanceStateFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def validate_form(self, data, **kwargs): ...

class SetSingleTaskInstanceStateFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class TaskInstanceReferenceSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class TaskInstanceReferenceCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    task_instances: Incomplete
    def __init__(self, _cls, task_instances: list[tuple[TaskInstance, str]]) -> None: ...
    def __getnewargs__(self): ...

class TaskInstanceReferenceCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class SetTaskInstanceNoteFormSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
task_instance_schema: TaskInstanceSchema
task_instance_collection_schema: TaskInstanceCollectionSchema
task_instance_batch_form: TaskInstanceBatchFormSchema
clear_task_instance_form: ClearTaskInstanceFormSchema
set_task_instance_state_form: SetTaskInstanceStateFormSchema
set_single_task_instance_state_form: SetSingleTaskInstanceStateFormSchema
task_instance_reference_schema: TaskInstanceReferenceSchema
task_instance_reference_collection_schema: TaskInstanceReferenceCollectionSchema
set_task_instance_note_form_schema: SetTaskInstanceNoteFormSchema
