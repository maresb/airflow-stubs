import collections
import marshmallow.schema
from _typeshed import Incomplete
from airflow.api_connexion.schemas.common_schema import ClassReferenceSchema as ClassReferenceSchema, ColorField as ColorField, TimeDeltaSchema as TimeDeltaSchema, WeightRuleField as WeightRuleField
from airflow.api_connexion.schemas.dag_schema import DAGSchema as DAGSchema
from airflow.models.mappedoperator import MappedOperator as MappedOperator
from typing import ClassVar

TYPE_CHECKING: bool

class TaskSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class TaskCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    tasks: Incomplete
    total_entries: Incomplete
    def __init__(self, _cls, tasks: list[Operator], total_entries: int) -> None: ...
    def __getnewargs__(self): ...

class TaskCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
task_schema: TaskSchema
task_collection_schema: TaskCollectionSchema
