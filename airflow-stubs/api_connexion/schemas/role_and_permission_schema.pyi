import airflow.auth.managers.fab.models
import collections
import marshmallow.schema
import marshmallow_sqlalchemy.schema
from _typeshed import Incomplete
from airflow.auth.managers.fab.models import Action as Action, Permission as Permission, Resource as Resource, Role as Role
from typing import ClassVar

class ActionSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.auth.managers.fab.models.Action]] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class ResourceSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.auth.managers.fab.models.Resource]] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class ActionCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    actions: Incomplete
    total_entries: Incomplete
    def __init__(self, _cls, actions: list[Action], total_entries: int) -> None: ...
    def __getnewargs__(self): ...

class ActionCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class ActionResourceSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.auth.managers.fab.models.Permission]] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class RoleSchema(marshmallow_sqlalchemy.schema.SQLAlchemySchema):
    class Meta:
        model: ClassVar[type[airflow.auth.managers.fab.models.Role]] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow_sqlalchemy.schema.SQLAlchemySchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class RoleCollection(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    roles: Incomplete
    total_entries: Incomplete
    def __init__(self, _cls, roles: list[Role], total_entries: int) -> None: ...
    def __getnewargs__(self): ...

class RoleCollectionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
role_schema: RoleSchema
role_collection_schema: RoleCollectionSchema
action_collection_schema: ActionCollectionSchema
