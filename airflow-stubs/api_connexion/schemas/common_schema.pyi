import collections
import marshmallow.fields
import marshmallow.schema
import marshmallow_oneofschema.one_of_schema
from _typeshed import Incomplete
from airflow.models.mappedoperator import MappedOperator as MappedOperator
from airflow.serialization.serialized_objects import SerializedBaseOperator as SerializedBaseOperator
from airflow.utils.weight_rule import WeightRule as WeightRule
from typing import ClassVar

class CronExpression(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, _cls, value: str) -> None: ...
    def __getnewargs__(self): ...

class TimeDeltaSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def make_time_delta(self, data, **kwargs): ...

class RelativeDeltaSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def make_relative_delta(self, data, **kwargs): ...

class CronExpressionSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def make_cron_expression(self, data, **kwargs): ...

class ScheduleIntervalSchema(marshmallow_oneofschema.one_of_schema.OneOfSchema):
    type_field: ClassVar[str] = ...
    type_schemas: ClassVar[dict] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...
    def get_obj_type(self, obj): ...

class ColorField(marshmallow.fields.String):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __slotnames__: ClassVar[list] = ...
    def __init__(self, **metadata) -> None: ...

class WeightRuleField(marshmallow.fields.String):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __slotnames__: ClassVar[list] = ...
    def __init__(self, **metadata) -> None: ...

class TimezoneField(marshmallow.fields.String):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __slotnames__: ClassVar[list] = ...

class ClassReferenceSchema(marshmallow.schema.Schema):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    opts: ClassVar[marshmallow.schema.SchemaOpts] = ...
    _declared_fields: ClassVar[dict] = ...
    _hooks: ClassVar[collections.defaultdict] = ...

class JsonObjectField(marshmallow.fields.Field):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __slotnames__: ClassVar[list] = ...
