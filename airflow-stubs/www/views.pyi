from _typeshed import Incomplete
from airflow import macros as macros, models as models, plugins_manager as plugins_manager, settings as settings
from airflow.api.common.airflow_health import get_airflow_health as get_airflow_health
from airflow.api.common.mark_tasks import set_dag_run_state_to_failed as set_dag_run_state_to_failed, set_dag_run_state_to_queued as set_dag_run_state_to_queued, set_dag_run_state_to_success as set_dag_run_state_to_success, set_state as set_state
from airflow.auth.managers.models.batch_apis import IsAuthorizedDagRequest as IsAuthorizedDagRequest
from airflow.auth.managers.models.resource_details import AccessView as AccessView, DagAccessEntity as DagAccessEntity, DagDetails as DagDetails
from airflow.compat.functools import cache as cache
from airflow.configuration import AIRFLOW_CONFIG as AIRFLOW_CONFIG, conf as conf
from airflow.datasets import Dataset as Dataset, DatasetAlias as DatasetAlias
from airflow.exceptions import AirflowConfigException as AirflowConfigException, AirflowException as AirflowException, AirflowNotFoundException as AirflowNotFoundException, ParamValidationError as ParamValidationError, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.executors.executor_loader import ExecutorLoader as ExecutorLoader
from airflow.hooks.base import BaseHook as BaseHook
from airflow.jobs.job import Job as Job
from airflow.jobs.scheduler_job_runner import SchedulerJobRunner as SchedulerJobRunner
from airflow.jobs.triggerer_job_runner import TriggererJobRunner as TriggererJobRunner
from airflow.models import Connection as Connection, DagModel as DagModel, DagTag as DagTag, Log as Log, SlaMiss as SlaMiss, Trigger as Trigger, XCom as XCom
from airflow.models.dag import DAG as DAG, get_dataset_triggered_next_run_info as get_dataset_triggered_next_run_info
from airflow.models.dagrun import DagRun as DagRun, DagRunType as DagRunType, RUN_ID_REGEX as RUN_ID_REGEX
from airflow.models.dataset import DagScheduleDatasetReference as DagScheduleDatasetReference, DatasetDagRunQueue as DatasetDagRunQueue, DatasetEvent as DatasetEvent, DatasetModel as DatasetModel
from airflow.models.errors import ParseImportError as ParseImportError
from airflow.models.operator import Operator as Operator
from airflow.models.serialized_dag import SerializedDagModel as SerializedDagModel
from airflow.models.taskinstance import TaskInstance as TaskInstance, TaskInstanceNote as TaskInstanceNote
from airflow.plugins_manager import PLUGINS_ATTRIBUTES_TO_DUMP as PLUGINS_ATTRIBUTES_TO_DUMP
from airflow.providers_manager import ProvidersManager as ProvidersManager
from airflow.security import permissions as permissions
from airflow.ti_deps.dep_context import DepContext as DepContext
from airflow.ti_deps.dependencies_deps import SCHEDULER_QUEUED_DEPS as SCHEDULER_QUEUED_DEPS
from airflow.timetables._cron import CronMixin as CronMixin
from airflow.timetables.base import DataInterval as DataInterval, TimeRestriction as TimeRestriction
from airflow.timetables.simple import ContinuousTimetable as ContinuousTimetable
from airflow.utils import timezone as timezone, yaml as yaml
from airflow.utils.airflow_flask_app import get_airflow_app as get_airflow_app
from airflow.utils.dag_edges import dag_edges as dag_edges
from airflow.utils.db import get_query_count as get_query_count
from airflow.utils.docs import get_doc_url_for_provider as get_doc_url_for_provider, get_docs_url as get_docs_url
from airflow.utils.helpers import exactly_one as exactly_one
from airflow.utils.log import secrets_masker as secrets_masker
from airflow.utils.log.log_reader import TaskLogReader as TaskLogReader
from airflow.utils.net import get_hostname as get_hostname
from airflow.utils.session import NEW_SESSION as NEW_SESSION, create_session as create_session, provide_session as provide_session
from airflow.utils.state import DagRunState as DagRunState, State as State, TaskInstanceState as TaskInstanceState
from airflow.utils.strings import to_boolean as to_boolean
from airflow.utils.task_group import TaskGroup as TaskGroup, task_group_to_dict as task_group_to_dict
from airflow.utils.timezone import td_format as td_format, utcnow as utcnow
from airflow.utils.types import NOTSET as NOTSET
from airflow.version import version as version
from airflow.www import auth as auth, utils as wwwutils
from airflow.www.decorators import action_logging as action_logging, gzipped as gzipped
from airflow.www.extensions.init_auth_manager import get_auth_manager as get_auth_manager, is_auth_manager_initialized as is_auth_manager_initialized
from airflow.www.forms import DagRunEditForm as DagRunEditForm, DateTimeForm as DateTimeForm, TaskInstanceEditForm as TaskInstanceEditForm, create_connection_form_class as create_connection_form_class
from airflow.www.widgets import AirflowModelListWidget as AirflowModelListWidget, AirflowVariableShowWidget as AirflowVariableShowWidget
from collections.abc import Generator
from flask_appbuilder import BaseView, ModelView
from flask_appbuilder.models.sqla.filters import BaseFilter
from flask_appbuilder.widgets import FormWidget
from functools import cached_property as cached_property
from sqlalchemy.orm import Session as Session
from typing import Any, Collection, Sequence

PAGE_SIZE: Incomplete
FILTER_TAGS_COOKIE: str
FILTER_STATUS_COOKIE: str
FILTER_LASTRUN_COOKIE: str
LINECHART_X_AXIS_TICKFORMAT: str
SENSITIVE_FIELD_PLACEHOLDER: str
logger: Incomplete

def sanitize_args(args: dict[str, Any]) -> dict[str, Any]: ...
def get_safe_url(url): ...
def get_date_time_num_runs_dag_runs_form_data(www_request, session, dag): ...
def node_dict(node_id, label, node_class): ...
def dag_to_grid(dag: DagModel, dag_runs: Sequence[DagRun], session: Session) -> dict[str, Any]: ...
def get_key_paths(input_dict) -> Generator[Incomplete]: ...
def get_value_from_path(key_path, content): ...
def get_task_stats_from_query(qry): ...
def redirect_or_json(origin, msg, status: str = '', status_code: int = 200): ...
def not_found(error): ...
def method_not_allowed(error): ...
def show_traceback(error): ...

class AirflowBaseView(BaseView):
    route_base: str
    extra_args: Incomplete
    executor: Incomplete
    _: Incomplete
    line_chart_attr: Incomplete
    def render_template(self, *args, **kwargs): ...

class Airflow(AirflowBaseView):
    def health(self): ...
    def index(self): ...
    def datasets(self): ...
    def cluster_activity(self): ...
    def next_run_datasets_summary(self, session: Session = ...): ...
    def dag_stats(self, session: Session = ...): ...
    def task_stats(self, session: Session = ...): ...
    def last_dagruns(self, session: Session = ...): ...
    def legacy_code(self): ...
    def code(self, dag_id): ...
    def legacy_dag_details(self): ...
    def dag_details(self, dag_id): ...
    def rendered_templates(self, session): ...
    def rendered_k8s(self, *, session: Session = ...): ...
    def rendered_k8s_data(self, *, session: Session = ...): ...
    def get_logs_with_metadata(self, session: Session = ...): ...
    def log(self, session: Session = ...): ...
    def redirect_to_external_log(self, session: Session = ...): ...
    def task(self, session: Session = ...): ...
    def xcom(self, session: Session = ...): ...
    def delete(self): ...
    def trigger(self, dag_id: str, session: Session = ...): ...
    def clear(self, *, session: Session = ...): ...
    def dagrun_clear(self, *, session: Session = ...): ...
    def blocked(self, session: Session = ...): ...
    def dagrun_failed(self): ...
    def dagrun_success(self): ...
    def dagrun_queued(self): ...
    def dagrun_details(self): ...
    def confirm(self): ...
    def failed(self): ...
    def success(self): ...
    def dag(self, dag_id): ...
    def legacy_tree(self): ...
    def grid(self, dag_id: str, session: Session = ...): ...
    def legacy_calendar(self): ...
    def calendar(self, dag_id: str): ...
    def calendar_data(self, session: Session = ...): ...
    def legacy_graph(self): ...
    def graph(self, dag_id: str, session: Session = ...): ...
    def legacy_duration(self): ...
    def duration(self, dag_id: str): ...
    def legacy_tries(self): ...
    def tries(self, dag_id: str): ...
    def legacy_landing_times(self): ...
    def landing_times(self, dag_id: str): ...
    def paused(self): ...
    def legacy_gantt(self): ...
    def gantt(self, dag_id: str, session: Session = ...): ...
    def extra_links(self, *, session: Session = ...): ...
    def graph_data(self): ...
    def task_instances(self): ...
    def grid_data(self): ...
    def historical_metrics_data(self): ...
    def next_run_datasets(self, dag_id): ...
    def dataset_dependencies(self): ...
    def datasets_summary(self): ...
    def robots(self): ...
    def legacy_audit_log(self): ...
    def audit_log(self, dag_id: str): ...
    def parse_dag(self, file_token: str): ...

class ConfigurationView(AirflowBaseView):
    default_view: str
    class_permission_name: Incomplete
    base_permissions: Incomplete
    def conf(self): ...

class RedocView(AirflowBaseView):
    default_view: str
    def redoc(self): ...

class DagFilter(BaseFilter):
    def apply(self, query, func): ...

class AirflowModelView(ModelView):
    list_widget = AirflowModelListWidget
    page_size = PAGE_SIZE
    CustomSQLAInterface = wwwutils.CustomSQLAInterface
    def __getattribute__(self, attr): ...
    def show(self, pk): ...
    def edit(self, pk): ...
    def delete(self, pk): ...
    def action_post(self): ...

class SlaMissModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    label_columns: Incomplete
    add_columns: Incomplete
    edit_columns: Incomplete
    search_columns: Incomplete
    base_order: Incomplete
    base_filters: Incomplete
    formatters_columns: Incomplete
    def action_muldelete(self, items): ...
    def action_mulnotificationsent(self, items: list[SlaMiss]): ...
    def action_mulnotificationsentfalse(self, items: list[SlaMiss]): ...
    def action_mulemailsent(self, items: list[SlaMiss]): ...
    def action_mulemailsentfalse(self, items: list[SlaMiss]): ...

class XComModelView(AirflowModelView):
    route_base: str
    list_title: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    search_columns: Incomplete
    list_columns: Incomplete
    base_order: Incomplete
    order_columns: Incomplete
    base_filters: Incomplete
    formatters_columns: Incomplete
    def action_muldelete(self, items): ...
    def pre_add(self, item) -> None: ...
    def pre_update(self, item) -> None: ...

class ConnectionFormWidget(FormWidget):
    @cached_property
    def field_behaviours(self) -> str: ...
    @cached_property
    def testable_connection_types(self) -> list[str]: ...

class ConnectionFormProxy:
    @staticmethod
    def refresh(obj: Incomplete | None = None): ...

class ConnectionModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    add_form = ConnectionFormProxy
    edit_form = ConnectionFormProxy
    add_template: str
    edit_template: str
    add_widget = ConnectionFormWidget
    edit_widget = ConnectionFormWidget
    base_order: Incomplete
    @property
    def add_columns(self) -> list[str]: ...
    @property
    def edit_columns(self) -> list[str]: ...
    def action_muldelete(self, connections): ...
    def action_mulduplicate(self, connections, session: Session = ...): ...
    def process_form(self, form, is_created) -> None: ...
    def prefill_form(self, form, pk) -> None: ...

class PluginView(AirflowBaseView):
    default_view: str
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    plugins_attributes_to_dump = PLUGINS_ATTRIBUTES_TO_DUMP
    def list(self): ...

class ProviderView(AirflowBaseView):
    default_view: str
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    def list(self): ...

class PoolModelView(AirflowModelView):
    route_base: str
    list_template: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    add_columns: Incomplete
    edit_columns: Incomplete
    include_deferred_field: Incomplete
    edit_form_extra_fields: Incomplete
    add_form_extra_fields: Incomplete
    base_order: Incomplete
    def action_muldelete(self, items): ...
    def delete(self, pk): ...
    def pool_link(self): ...
    def frunning_slots(self): ...
    def fqueued_slots(self): ...
    def fscheduled_slots(self): ...
    def fdeferred_slots(self): ...
    formatters_columns: Incomplete
    validators_columns: Incomplete

class VariableModelView(AirflowModelView):
    route_base: str
    list_template: str
    edit_template: str
    show_template: str
    show_widget = AirflowVariableShowWidget
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    add_columns: Incomplete
    edit_columns: Incomplete
    show_columns: Incomplete
    search_columns: Incomplete
    base_order: Incomplete
    def hidden_field_formatter(self): ...
    formatters_columns: Incomplete
    validators_columns: Incomplete
    def prefill_form(self, form, request_id) -> None: ...
    def prefill_show(self, item) -> None: ...
    extra_args: Incomplete
    def action_muldelete(self, items): ...
    def action_varexport(self, items): ...
    def varimport(self, session): ...

class JobModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    search_columns: Incomplete
    base_order: Incomplete
    base_filters: Incomplete
    formatters_columns: Incomplete

class DagRunModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    search_columns: Incomplete
    label_columns: Incomplete
    edit_columns: Incomplete
    order_columns: Incomplete
    base_order: Incomplete
    base_filters: Incomplete
    edit_form = DagRunEditForm
    def duration_f(self): ...
    formatters_columns: Incomplete
    def action_muldelete(self, items: list[DagRun]): ...
    def action_set_queued(self, drs: list[DagRun]): ...
    def action_set_running(self, drs: list[DagRun]): ...
    def action_set_failed(self, drs: list[DagRun], session: Session = ...): ...
    def action_set_success(self, drs: list[DagRun], session: Session = ...): ...
    def action_clear(self, drs: list[DagRun], session: Session = ...): ...

class LogModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    search_columns: Incomplete
    label_columns: Incomplete
    base_order: Incomplete
    base_filters: Incomplete
    formatters_columns: Incomplete

class TaskRescheduleModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    related_views: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    label_columns: Incomplete
    search_columns: Incomplete
    base_order: Incomplete
    base_filters: Incomplete
    def duration_f(self): ...
    formatters_columns: Incomplete

class TriggerModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    list_columns: Incomplete
    search_columns: Incomplete
    base_order: Incomplete
    formatters_columns: Incomplete

class TaskInstanceModelView(AirflowModelView):
    route_base: str
    datamodel: Incomplete
    class_permission_name: Incomplete
    method_permission_name: Incomplete
    base_permissions: Incomplete
    page_size = PAGE_SIZE
    list_columns: Incomplete
    order_columns: Incomplete
    label_columns: Incomplete
    search_columns: Incomplete
    edit_columns: Incomplete
    add_exclude_columns: Incomplete
    edit_form = TaskInstanceEditForm
    base_order: Incomplete
    base_filters: Incomplete
    def log_url_formatter(self): ...
    def duration_f(self): ...
    formatters_columns: Incomplete
    def action_clear(self, task_instances, session: Session = ...): ...
    def action_clear_downstream(self, task_instances, session: Session = ...): ...
    def action_muldelete(self, items): ...
    def set_task_instance_state(self, tis: Collection[TaskInstance], target_state: TaskInstanceState, session: Session = ...) -> None: ...
    def action_set_failed(self, tis): ...
    def action_set_success(self, tis): ...
    def action_set_retry(self, tis): ...
    def action_set_skipped(self, tis): ...

class AutocompleteView(AirflowBaseView):
    def autocomplete(self, session: Session = ...): ...

class DagDependenciesView(AirflowBaseView):
    refresh_interval: Incomplete
    last_refresh: Incomplete
    nodes: list[dict[str, Any]]
    edges: list[dict[str, str]]
    def list(self): ...

def add_user_permissions_to_dag(sender, template, context, **extra) -> None: ...
def restrict_to_dev(f): ...

class DevView(BaseView):
    route_base: str
    def coverage(self, path): ...

class DocsView(BaseView):
    route_base: str
    def home(self, filename: str = 'index.html'): ...
