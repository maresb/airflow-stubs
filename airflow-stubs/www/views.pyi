import airflow as airflow
import airflow.executors.executor_loader
import airflow.executors.sequential_executor
import airflow.models as models
import airflow.models.errors as errors
import airflow.plugins_manager as plugins_manager
import airflow.security.permissions as permissions
import airflow.settings as settings
import airflow.utils.json as utils_json
import airflow.utils.log.secrets_masker as secrets_masker
import airflow.utils.timezone as timezone
import airflow.utils.yaml as yaml
import airflow.www.auth as auth
import airflow.www.forms
import airflow.www.utils
import airflow.www.utils as wwwutils
import airflow.www.widgets
import datetime
import flask_appbuilder.baseviews
import flask_appbuilder.models.filters
import flask_appbuilder.views
import flask_appbuilder.widgets
import functools
import wtforms.fields.core
from _typeshed import Incomplete
from airflow.api.common.airflow_health import get_airflow_health as get_airflow_health
from airflow.api.common.mark_tasks import set_dag_run_state_to_failed as set_dag_run_state_to_failed, set_dag_run_state_to_queued as set_dag_run_state_to_queued, set_dag_run_state_to_success as set_dag_run_state_to_success, set_state as set_state
from airflow.auth.managers.models.resource_details import AccessView as AccessView, DagAccessEntity as DagAccessEntity, DagDetails as DagDetails
from airflow.configuration import conf as conf
from airflow.datasets import Dataset as Dataset
from airflow.exceptions import AirflowConfigException as AirflowConfigException, AirflowException as AirflowException, AirflowNotFoundException as AirflowNotFoundException, ParamValidationError as ParamValidationError, RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.executors.executor_loader import ExecutorLoader as ExecutorLoader
from airflow.hooks.base import BaseHook as BaseHook
from airflow.jobs.job import Job as Job
from airflow.jobs.scheduler_job_runner import SchedulerJobRunner as SchedulerJobRunner
from airflow.jobs.triggerer_job_runner import TriggererJobRunner as TriggererJobRunner
from airflow.models.connection import Connection as Connection
from airflow.models.dag import DagModel as DagModel, DagTag as DagTag, get_dataset_triggered_next_run_info as get_dataset_triggered_next_run_info
from airflow.models.dagrun import DagRun as DagRun
from airflow.models.dataset import DagScheduleDatasetReference as DagScheduleDatasetReference, DatasetDagRunQueue as DatasetDagRunQueue, DatasetEvent as DatasetEvent, DatasetModel as DatasetModel
from airflow.models.log import Log as Log
from airflow.models.operator import needs_expansion as needs_expansion
from airflow.models.serialized_dag import SerializedDagModel as SerializedDagModel
from airflow.models.slamiss import SlaMiss as SlaMiss
from airflow.models.taskfail import TaskFail as TaskFail
from airflow.models.taskinstance import TaskInstance as TaskInstance, TaskInstanceNote as TaskInstanceNote
from airflow.models.trigger import Trigger as Trigger
from airflow.models.xcom import XCom as XCom
from airflow.providers_manager import ProvidersManager as ProvidersManager
from airflow.ti_deps.dep_context import DepContext as DepContext
from airflow.timetables._cron import CronMixin as CronMixin
from airflow.timetables.base import DataInterval as DataInterval, TimeRestriction as TimeRestriction
from airflow.utils.airflow_flask_app import get_airflow_app as get_airflow_app
from airflow.utils.dag_edges import dag_edges as dag_edges
from airflow.utils.dates import infer_time_unit as infer_time_unit, scale_time_units as scale_time_units
from airflow.utils.db import get_query_count as get_query_count
from airflow.utils.docs import get_doc_url_for_provider as get_doc_url_for_provider, get_docs_url as get_docs_url
from airflow.utils.helpers import exactly_one as exactly_one
from airflow.utils.log.log_reader import TaskLogReader as TaskLogReader
from airflow.utils.net import get_hostname as get_hostname
from airflow.utils.session import create_session as create_session, provide_session as provide_session
from airflow.utils.state import DagRunState as DagRunState, State as State, TaskInstanceState as TaskInstanceState
from airflow.utils.strings import to_boolean as to_boolean
from airflow.utils.task_group import TaskGroup as TaskGroup, task_group_to_dict as task_group_to_dict
from airflow.utils.timezone import td_format as td_format, utcnow as utcnow
from airflow.utils.types import DagRunType as DagRunType, NOTSET as NOTSET
from airflow.www.decorators import action_logging as action_logging, gzipped as gzipped
from airflow.www.extensions.init_auth_manager import get_auth_manager as get_auth_manager
from airflow.www.forms import DagRunEditForm as DagRunEditForm, DateTimeForm as DateTimeForm, DateTimeWithNumRunsForm as DateTimeWithNumRunsForm, TaskInstanceEditForm as TaskInstanceEditForm, create_connection_form_class as create_connection_form_class
from airflow.www.widgets import AirflowModelListWidget as AirflowModelListWidget, AirflowVariableShowWidget as AirflowVariableShowWidget
from types import ModuleType
from typing import Any, ClassVar, Sequence

TYPE_CHECKING: bool
AIRFLOW_CONFIG: str
RUN_ID_REGEX: str
PLUGINS_ATTRIBUTES_TO_DUMP: set
SCHEDULER_QUEUED_DEPS: set
NEW_SESSION: None
version: str
PAGE_SIZE: int
FILTER_TAGS_COOKIE: str
FILTER_STATUS_COOKIE: str
LINECHART_X_AXIS_TICKFORMAT: str
SENSITIVE_FIELD_PLACEHOLDER: str
def sanitize_args(args: dict[str, str]) -> dict[str, str]: ...
def get_safe_url(url): ...
def get_date_time_num_runs_dag_runs_form_data(www_request, session, dag): ...
def node_dict(node_id, label, node_class): ...
def dag_to_grid(dag: DagModel, dag_runs: Sequence[DagRun], session: Session) -> dict[str, Any]: ...
def get_key_paths(input_dict): ...
def get_value_from_path(key_path, content): ...
def get_task_stats_from_query(qry): ...
def redirect_or_json(origin, msg, status: str = ..., status_code: int = ...): ...
def not_found(error): ...
def method_not_allowed(error): ...
def show_traceback(error): ...

class AirflowBaseView(flask_appbuilder.baseviews.BaseView):
    macros: ClassVar[ModuleType] = ...
    route_base: ClassVar[str] = ...
    extra_args: ClassVar[dict] = ...
    executor: ClassVar[type[airflow.executors.sequential_executor.SequentialExecutor]] = ...
    _: ClassVar[airflow.executors.executor_loader.ConnectorSource] = ...
    line_chart_attr: ClassVar[dict] = ...
    def render_template(self, *args, **kwargs): ...

class Airflow(AirflowBaseView):
    def health(self): ...
    def index(self, *args, **kwargs): ...
    def datasets(self, *args, **kwargs): ...
    def cluster_activity(self, *args, **kwargs): ...
    def next_run_datasets_summary(self, *args, **kwargs): ...
    def dag_stats(self, *args, **kwargs): ...
    def task_stats(self, *args, **kwargs): ...
    def last_dagruns(self, *args, **kwargs): ...
    def legacy_code(self): ...
    def code(self, *args, **kwargs): ...
    def legacy_dag_details(self): ...
    def dag_details(self, *args, **kwargs): ...
    def rendered_templates(self, *args, **kwargs): ...
    def rendered_k8s(self, *args, **kwargs): ...
    def get_logs_with_metadata(self, *args, **kwargs): ...
    def log(self, *args, **kwargs): ...
    def redirect_to_external_log(self, *args, **kwargs): ...
    def task(self, *args, **kwargs): ...
    def xcom(self, *args, **kwargs): ...
    def delete(self, *args, **kwargs): ...
    def trigger(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def dagrun_clear(self, *args, **kwargs): ...
    def blocked(self, *args, **kwargs): ...
    def dagrun_failed(self, *args, **kwargs): ...
    def dagrun_success(self, *args, **kwargs): ...
    def dagrun_queued(self, *args, **kwargs): ...
    def dagrun_details(self): ...
    def confirm(self, *args, **kwargs): ...
    def failed(self, *args, **kwargs): ...
    def success(self, *args, **kwargs): ...
    def dag(self, *args, **kwargs): ...
    def legacy_tree(self, *args, **kwargs): ...
    def grid(self, *args, **kwargs): ...
    def legacy_calendar(self, *args, **kwargs): ...
    def calendar(self, *args, **kwargs): ...
    def legacy_graph(self, *args, **kwargs): ...
    def graph(self, *args, **kwargs): ...
    def legacy_duration(self, *args, **kwargs): ...
    def duration(self, *args, **kwargs): ...
    def legacy_tries(self, *args, **kwargs): ...
    def tries(self, *args, **kwargs): ...
    def legacy_landing_times(self, *args, **kwargs): ...
    def landing_times(self, *args, **kwargs): ...
    def paused(self, *args, **kwargs): ...
    def legacy_gantt(self, *args, **kwargs): ...
    def gantt(self, *args, **kwargs): ...
    def extra_links(self, *args, **kwargs): ...
    def graph_data(self, *args, **kwargs): ...
    def task_instances(self, *args, **kwargs): ...
    def grid_data(self, *args, **kwargs): ...
    def historical_metrics_data(self, *args, **kwargs): ...
    def next_run_datasets(self, *args, **kwargs): ...
    def dataset_dependencies(self, *args, **kwargs): ...
    def datasets_summary(self, *args, **kwargs): ...
    def robots(self, *args, **kwargs): ...
    def legacy_audit_log(self): ...
    def audit_log(self, *args, **kwargs): ...

class ConfigurationView(AirflowBaseView):
    default_view: ClassVar[str] = ...
    class_permission_name: ClassVar[str] = ...
    base_permissions: ClassVar[list] = ...
    def conf(self, *args, **kwargs): ...

class RedocView(AirflowBaseView):
    default_view: ClassVar[str] = ...
    def redoc(self): ...

class DagFilter(flask_appbuilder.models.filters.BaseFilter):
    def apply(self, query, func): ...

class AirflowModelView(flask_appbuilder.views.ModelView):
    list_widget: ClassVar[type[airflow.www.widgets.AirflowModelListWidget]] = ...
    page_size: ClassVar[int] = ...
    CustomSQLAInterface: ClassVar[type[airflow.www.utils.CustomSQLAInterface]] = ...
    def show(self, *args, **kwargs): ...
    def edit(self, *args, **kwargs): ...
    def delete(self, *args, **kwargs): ...
    def action_post(self): ...

class SlaMissModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    label_columns: ClassVar[dict] = ...
    add_columns: ClassVar[list] = ...
    edit_columns: ClassVar[list] = ...
    search_columns: ClassVar[list] = ...
    base_order: ClassVar[tuple] = ...
    base_filters: ClassVar[list] = ...
    formatters_columns: ClassVar[dict] = ...
    def action_muldelete(self, *args, **kwargs): ...
    def action_mulnotificationsent(self, *args, **kwargs): ...
    def action_mulnotificationsentfalse(self, *args, **kwargs): ...
    def action_mulemailsent(self, *args, **kwargs): ...
    def action_mulemailsentfalse(self, *args, **kwargs): ...

class XComModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    list_title: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    search_columns: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    base_order: ClassVar[tuple] = ...
    base_filters: ClassVar[list] = ...
    formatters_columns: ClassVar[dict] = ...
    def action_muldelete(self, *args, **kwargs): ...
    def pre_add(self, item): ...
    def pre_update(self, item): ...

class ConnectionFormWidget(flask_appbuilder.widgets.FormWidget):
    field_behaviours: ClassVar[functools.cached_property] = ...
    testable_connection_types: ClassVar[functools.cached_property] = ...

class ConnectionFormProxy:
    @staticmethod
    def refresh(obj: Incomplete | None = ...): ...

class ConnectionModelView(AirflowModelView):
    class add_form:
        @staticmethod
        def refresh(obj: Incomplete | None = ...): ...

    class edit_form:
        @staticmethod
        def refresh(obj: Incomplete | None = ...): ...

    class add_widget(flask_appbuilder.widgets.FormWidget):
        field_behaviours: ClassVar[functools.cached_property] = ...
        testable_connection_types: ClassVar[functools.cached_property] = ...

    class edit_widget(flask_appbuilder.widgets.FormWidget):
        field_behaviours: ClassVar[functools.cached_property] = ...
        testable_connection_types: ClassVar[functools.cached_property] = ...
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    _add_columns: ClassVar[list] = ...
    _edit_columns: ClassVar[list] = ...
    add_template: ClassVar[str] = ...
    edit_template: ClassVar[str] = ...
    base_order: ClassVar[tuple] = ...
    def action_muldelete(self, *args, **kwargs): ...
    def action_mulduplicate(self, *args, **kwargs): ...
    def process_form(self, form, is_created): ...
    def prefill_form(self, form, pk): ...
    @property
    def add_columns(self): ...
    @property
    def edit_columns(self): ...

class PluginView(AirflowBaseView):
    default_view: ClassVar[str] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    plugins_attributes_to_dump: ClassVar[set] = ...
    def list(self, *args, **kwargs): ...

class ProviderView(AirflowBaseView):
    default_view: ClassVar[str] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    def list(self, *args, **kwargs): ...

class PoolModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    list_template: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    add_columns: ClassVar[list] = ...
    edit_columns: ClassVar[list] = ...
    include_deferred_field: ClassVar[wtforms.fields.core.UnboundField] = ...
    edit_form_extra_fields: ClassVar[dict] = ...
    add_form_extra_fields: ClassVar[dict] = ...
    base_order: ClassVar[tuple] = ...
    formatters_columns: ClassVar[dict] = ...
    validators_columns: ClassVar[dict] = ...
    def action_muldelete(self, *args, **kwargs): ...
    def delete(self, *args, **kwargs): ...
    def pool_link(self): ...
    def frunning_slots(self): ...
    def fqueued_slots(self): ...
    def fscheduled_slots(self): ...
    def fdeferred_slots(self): ...

class VariableModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    list_template: ClassVar[str] = ...
    edit_template: ClassVar[str] = ...
    show_template: ClassVar[str] = ...
    show_widget: ClassVar[type[airflow.www.widgets.AirflowVariableShowWidget]] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    add_columns: ClassVar[list] = ...
    edit_columns: ClassVar[list] = ...
    show_columns: ClassVar[list] = ...
    search_columns: ClassVar[list] = ...
    base_order: ClassVar[tuple] = ...
    formatters_columns: ClassVar[dict] = ...
    validators_columns: ClassVar[dict] = ...
    extra_args: ClassVar[dict] = ...
    def hidden_field_formatter(self): ...
    def prefill_form(self, form, request_id): ...
    def prefill_show(self, item): ...
    def action_muldelete(self, *args, **kwargs): ...
    def action_varexport(self, *args, **kwargs): ...
    def varimport(self, *args, **kwargs): ...

class JobModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    search_columns: ClassVar[list] = ...
    base_order: ClassVar[tuple] = ...
    base_filters: ClassVar[list] = ...
    formatters_columns: ClassVar[dict] = ...

class DagRunModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.DagRunCustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    search_columns: ClassVar[list] = ...
    label_columns: ClassVar[dict] = ...
    edit_columns: ClassVar[list] = ...
    order_columns: ClassVar[list] = ...
    base_order: ClassVar[tuple] = ...
    base_filters: ClassVar[list] = ...
    edit_form: ClassVar[type[airflow.www.forms.DagRunEditForm]] = ...
    formatters_columns: ClassVar[dict] = ...
    def duration_f(self): ...
    def action_muldelete(self, *args, **kwargs): ...
    def action_set_queued(self, *args, **kwargs): ...
    def action_set_running(self, *args, **kwargs): ...
    def action_set_failed(self, *args, **kwargs): ...
    def action_set_success(self, *args, **kwargs): ...
    def action_clear(self, *args, **kwargs): ...

class LogModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    search_columns: ClassVar[list] = ...
    label_columns: ClassVar[dict] = ...
    base_order: ClassVar[tuple] = ...
    base_filters: ClassVar[list] = ...
    formatters_columns: ClassVar[dict] = ...

class TaskRescheduleModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    related_views: ClassVar[list] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    label_columns: ClassVar[dict] = ...
    search_columns: ClassVar[list] = ...
    base_order: ClassVar[tuple] = ...
    base_filters: ClassVar[list] = ...
    formatters_columns: ClassVar[dict] = ...
    def duration_f(self): ...

class TriggerModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    list_columns: ClassVar[list] = ...
    search_columns: ClassVar[list] = ...
    base_order: ClassVar[tuple] = ...
    formatters_columns: ClassVar[dict] = ...

class TaskInstanceModelView(AirflowModelView):
    route_base: ClassVar[str] = ...
    datamodel: ClassVar[airflow.www.utils.CustomSQLAInterface] = ...
    class_permission_name: ClassVar[str] = ...
    method_permission_name: ClassVar[dict] = ...
    base_permissions: ClassVar[list] = ...
    page_size: ClassVar[int] = ...
    list_columns: ClassVar[list] = ...
    order_columns: ClassVar[list] = ...
    label_columns: ClassVar[dict] = ...
    search_columns: ClassVar[list] = ...
    edit_columns: ClassVar[list] = ...
    add_exclude_columns: ClassVar[list] = ...
    edit_form: ClassVar[type[airflow.www.forms.TaskInstanceEditForm]] = ...
    base_order: ClassVar[tuple] = ...
    base_filters: ClassVar[list] = ...
    formatters_columns: ClassVar[dict] = ...
    def log_url_formatter(self): ...
    def duration_f(self): ...
    def action_clear(self, *args, **kwargs): ...
    def action_clear_downstream(self, *args, **kwargs): ...
    def action_muldelete(self, *args, **kwargs): ...
    def set_task_instance_state(self, *args, **kwargs) -> None: ...
    def action_set_failed(self, *args, **kwargs): ...
    def action_set_success(self, *args, **kwargs): ...
    def action_set_retry(self, *args, **kwargs): ...
    def action_set_skipped(self, *args, **kwargs): ...

class AutocompleteView(AirflowBaseView):
    def autocomplete(self, *args, **kwargs): ...

class DagDependenciesView(AirflowBaseView):
    refresh_interval: ClassVar[datetime.timedelta] = ...
    last_refresh: ClassVar[datetime.datetime] = ...
    nodes: ClassVar[list] = ...
    edges: ClassVar[list] = ...
    def list(self, *args, **kwargs): ...
def add_user_permissions_to_dag(sender, template, context, **extra): ...
def restrict_to_dev(f): ...

class DevView(flask_appbuilder.baseviews.BaseView):
    route_base: ClassVar[str] = ...
    def coverage(self, *args, **kwargs): ...

class DocsView(flask_appbuilder.baseviews.BaseView):
    route_base: ClassVar[str] = ...
    def home(self, *args, **kwargs): ...
