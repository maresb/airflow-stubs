import airflow.api.common.experimental.delete_dag as delete
import airflow.api.common.experimental.pool as pool_api
import airflow.api.common.experimental.trigger_dag as trigger
import airflow.models as models
import airflow.utils.timezone as timezone
import typing
from airflow.api.common.experimental.get_code import get_code as get_code
from airflow.api.common.experimental.get_dag_run_state import get_dag_run_state as get_dag_run_state
from airflow.api.common.experimental.get_dag_runs import get_dag_runs as get_dag_runs
from airflow.api.common.experimental.get_lineage import get_lineage_api as get_lineage_api
from airflow.api.common.experimental.get_task import get_task as get_task
from airflow.api.common.experimental.get_task_instance import get_task_instance as get_task_instance
from airflow.exceptions import AirflowException as AirflowException
from airflow.utils.docs import get_docs_url as get_docs_url
from airflow.utils.strings import to_boolean as to_boolean

TYPE_CHECKING: bool
version: str
T: typing.TypeVar
def requires_authentication(function: T): ...
def add_deprecation_headers(response: Response): ...
def trigger_dag(*args, **kwargs): ...
def delete_dag(*args, **kwargs): ...
def dag_runs(*args, **kwargs): ...
def test(*args, **kwargs): ...
def info(*args, **kwargs): ...
def get_dag_code(*args, **kwargs): ...
def task_info(*args, **kwargs): ...
def dag_paused(*args, **kwargs): ...
def dag_is_paused(*args, **kwargs): ...
def task_instance_info(*args, **kwargs): ...
def dag_run_status(*args, **kwargs): ...
def latest_dag_runs(*args, **kwargs): ...
def get_pool(*args, **kwargs): ...
def get_pools(*args, **kwargs): ...
def create_pool(*args, **kwargs): ...
def delete_pool(*args, **kwargs): ...
def get_lineage(*args, **kwargs): ...
