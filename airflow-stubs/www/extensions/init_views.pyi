from _typeshed import Incomplete
from airflow.api_connexion.exceptions import common_error_handler as common_error_handler
from airflow.configuration import conf as conf
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.security import permissions as permissions
from airflow.utils.yaml import safe_load as safe_load
from airflow.www.constants import SWAGGER_BUNDLE as SWAGGER_BUNDLE, SWAGGER_ENABLED as SWAGGER_ENABLED
from airflow.www.extensions.init_auth_manager import get_auth_manager as get_auth_manager
from connexion import Resolver
from connexion.decorators.validation import RequestBodyValidator
from flask import Flask as Flask
from functools import cached_property as cached_property

log: Incomplete
ROOT_APP_DIR: Incomplete

def init_flash_views(app) -> None: ...
def init_appbuilder_views(app) -> None: ...
def init_plugins(app): ...
def init_error_handlers(app: Flask): ...
def set_cors_headers_on_response(response): ...
def init_data_form_parameters() -> None: ...

class _LazyResolution:
    operation_id: Incomplete
    def __init__(self, resolve_func, operation_id) -> None: ...
    @cached_property
    def function(self): ...

class _LazyResolver(Resolver):
    def resolve(self, operation): ...

class _CustomErrorRequestBodyValidator(RequestBodyValidator):
    def validate_schema(self, data, url): ...

base_paths: list[str]

def init_api_error_handlers(app: Flask) -> None: ...
def init_api_connexion(app: Flask) -> None: ...
def init_api_internal(app: Flask, standalone_api: bool = False) -> None: ...
def init_api_experimental(app) -> None: ...
def init_api_auth_provider(app) -> None: ...
