import airflow.security.permissions as permissions
import connexion.decorators.validation
import connexion.resolver
import functools
from airflow.api_connexion.exceptions import common_error_handler as common_error_handler
from airflow.configuration import conf as conf
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.utils.yaml import safe_load as safe_load
from airflow.www.extensions.init_auth_manager import get_auth_manager as get_auth_manager
from typing import ClassVar

TYPE_CHECKING: bool
def init_flash_views(app): ...
def init_appbuilder_views(app): ...
def init_plugins(app): ...
def init_error_handlers(app: Flask): ...
def set_cors_headers_on_response(response): ...

class _LazyResolution:
    function: ClassVar[functools.cached_property] = ...
    def __init__(self, resolve_func, operation_id) -> None: ...

class _LazyResolver(connexion.resolver.Resolver):
    def resolve(self, operation): ...

class _CustomErrorRequestBodyValidator(connexion.decorators.validation.RequestBodyValidator):
    def validate_schema(self, data, url): ...
base_paths: list
def init_api_error_handlers(app: Flask) -> None: ...
def init_api_connexion(app: Flask) -> None: ...
def init_api_internal(app: Flask, standalone_api: bool = ...) -> None: ...
def init_api_experimental(app): ...
def init_api_auth_provider(app): ...
