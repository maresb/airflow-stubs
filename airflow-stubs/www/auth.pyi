from _typeshed import Incomplete
from airflow.auth.managers.base_auth_manager import ResourceMethod as ResourceMethod
from airflow.auth.managers.models.batch_apis import IsAuthorizedConnectionRequest as IsAuthorizedConnectionRequest, IsAuthorizedDagRequest as IsAuthorizedDagRequest, IsAuthorizedPoolRequest as IsAuthorizedPoolRequest, IsAuthorizedVariableRequest as IsAuthorizedVariableRequest
from airflow.auth.managers.models.resource_details import AccessView as AccessView, ConnectionDetails as ConnectionDetails, DagAccessEntity as DagAccessEntity, DagDetails as DagDetails, PoolDetails as PoolDetails, VariableDetails as VariableDetails
from airflow.configuration import conf as conf
from airflow.exceptions import RemovedInAirflow3Warning as RemovedInAirflow3Warning
from airflow.models import DagRun as DagRun, Pool as Pool, SlaMiss as SlaMiss, TaskInstance as TaskInstance, Variable as Variable
from airflow.models.connection import Connection as Connection
from airflow.models.xcom import BaseXCom as BaseXCom
from airflow.utils.net import get_hostname as get_hostname
from airflow.www.extensions.init_auth_manager import get_auth_manager as get_auth_manager
from typing import Callable, Sequence, TypeVar

T = TypeVar('T', bound=Callable)
log: Incomplete

def get_access_denied_message(): ...
def has_access(permissions: Sequence[tuple[str, str]] | None = None) -> Callable[[T], T]: ...
def has_access_with_pk(f): ...
def has_access_configuration(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_connection(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_dag(method: ResourceMethod, access_entity: DagAccessEntity | None = None) -> Callable[[T], T]: ...
def has_access_dag_entities(method: ResourceMethod, access_entity: DagAccessEntity) -> Callable[[T], T]: ...
def has_access_dataset(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_pool(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_variable(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_view(access_view: AccessView = ...) -> Callable[[T], T]: ...
