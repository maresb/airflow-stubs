import airflow.utils.yaml as yaml
import configparser
import datetime
import functools
import os
from _typeshed import Incomplete
from airflow.exceptions import AirflowConfigException as AirflowConfigException
from airflow.utils.module_loading import import_string as import_string
from airflow.utils.providers_configuration_loader import providers_configuration_loaded as providers_configuration_loaded
from airflow.utils.weight_rule import WeightRule as WeightRule
from configparser import ConfigParser
from typing import Any, ClassVar, ConfigOptionsDictType, ConfigSourcesType, ConfigType, Generator, IO, Iterable

TYPE_CHECKING: bool
DEFAULT_SECRETS_SEARCH_PATH: list
ENV_VAR_PREFIX: str
def expand_env_var(env_var: str | None) -> str | None: ...
def run_command(command: str) -> str: ...
def retrieve_configuration_description(include_airflow: bool = ..., include_providers: bool = ..., selected_provider: str | None = ...) -> dict[str, dict[str, Any]]: ...

class AirflowConfigParser(configparser.ConfigParser):
    sensitive_config_values: ClassVar[functools.cached_property] = ...
    deprecated_options: ClassVar[dict] = ...
    many_to_one_deprecated_options: ClassVar[dict] = ...
    deprecated_sections: ClassVar[dict] = ...
    inversed_deprecated_options: ClassVar[functools.cached_property] = ...
    inversed_deprecated_sections: ClassVar[functools.cached_property] = ...
    deprecated_values: ClassVar[dict] = ...
    _available_logging_levels: ClassVar[list] = ...
    enums_options: ClassVar[dict] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, default_config: str | None = ..., *args, **kwargs) -> None: ...
    def is_template(self, section: str, key) -> bool: ...
    def get_default_value(self, section: str, key: str, fallback: Any = ..., raw: bool = ..., **kwargs) -> Any: ...
    def get_default_pre_2_7_value(self, section: str, key: str, **kwargs) -> Any: ...
    def get_sections_including_defaults(self) -> list[str]: ...
    def get_options_including_defaults(self, section: str) -> list[str]: ...
    def optionxform(self, optionstr: str) -> str: ...
    def make_sure_configuration_loaded(self, *args, **kwds) -> Generator[None, None, None]: ...
    def write(self, file: IO[str], section: str | None = ..., include_examples: bool = ..., include_descriptions: bool = ..., include_sources: bool = ..., include_env_vars: bool = ..., include_providers: bool = ..., comment_out_everything: bool = ..., hide_sensitive_values: bool = ..., extra_spacing: bool = ..., only_defaults: bool = ..., **kwargs: Any) -> None: ...
    def restore_core_default_configuration(self) -> None: ...
    def validate(self): ...
    def get_mandatory_value(self, section: str, key: str, **kwargs) -> str: ...
    def get(self, section: str, key: str, suppress_warnings: bool = ..., _extra_stacklevel: int = ..., **kwargs) -> str | None: ...
    def getboolean(self, section: str, key: str, **kwargs) -> bool: ...
    def getint(self, section: str, key: str, **kwargs) -> int: ...
    def getfloat(self, section: str, key: str, **kwargs) -> float: ...
    def getimport(self, section: str, key: str, **kwargs) -> Any: ...
    def getjson(self, section: str, key: str, fallback: Incomplete | None = ..., **kwargs) -> dict | list | str | int | float | None: ...
    def gettimedelta(self, section: str, key: str, fallback: Any = ..., **kwargs) -> datetime.timedelta | None: ...
    def read(self, filenames: str | bytes | os.PathLike | Iterable[str | bytes | os.PathLike], encoding: Incomplete | None = ...): ...
    def read_dict(self, dictionary: dict[str, dict[str, Any]], source: str = ...): ...
    def has_option(self, section: str, option: str) -> bool: ...
    def set(self, section: str, option: str, value: str | None = ...) -> None: ...
    def remove_option(self, section: str, option: str, remove_default: bool = ...): ...
    def getsection(self, section: str) -> ConfigOptionsDictType | None: ...
    def as_dict(self, display_source: bool = ..., display_sensitive: bool = ..., raw: bool = ..., include_env: bool = ..., include_cmds: bool = ..., include_secret: bool = ...) -> ConfigSourcesType: ...
    def suppress_future_warnings(self, *args, **kwds): ...
    def load_test_config(self): ...
    def expand_all_configuration_values(self): ...
    def remove_all_read_configurations(self): ...
    def load_providers_configuration(self): ...
    @property
    def providers_configuration_loaded(self): ...
def get_airflow_home() -> str: ...
def get_airflow_config(airflow_home: str) -> str: ...
def get_all_expansion_variables() -> dict[str, Any]: ...
def create_default_config_parser(configuration_description: dict[str, dict[str, Any]]) -> ConfigParser: ...
def create_pre_2_7_defaults() -> ConfigParser: ...
def write_default_airflow_configuration_if_needed() -> AirflowConfigParser: ...
def load_standard_airflow_configuration(airflow_config_parser: AirflowConfigParser): ...
def initialize_config() -> AirflowConfigParser: ...
def write_webserver_configuration_if_needed(*args, **kwargs): ...
def make_group_other_inaccessible(file_path: str): ...
def get(*args, **kwargs) -> ConfigType | None: ...
def getboolean(*args, **kwargs) -> bool: ...
def getfloat(*args, **kwargs) -> float: ...
def getint(*args, **kwargs) -> int: ...
def getsection(*args, **kwargs) -> ConfigOptionsDictType | None: ...
def has_option(*args, **kwargs) -> bool: ...
def remove_option(*args, **kwargs) -> bool: ...
def as_dict(*args, **kwargs) -> ConfigSourcesType: ...
def set(*args, **kwargs) -> None: ...
def ensure_secrets_loaded() -> list[BaseSecretsBackend]: ...
def get_custom_secret_backend() -> BaseSecretsBackend | None: ...
def initialize_secrets_backends() -> list[BaseSecretsBackend]: ...
def __getattr__(name): ...
def initialize_auth_manager() -> BaseAuthManager: ...

AIRFLOW_HOME: str
AIRFLOW_CONFIG: str
TEST_DAGS_FOLDER: str
TEST_PLUGINS_FOLDER: str
SECRET_KEY: str
FERNET_KEY: str
WEBSERVER_CONFIG: str
conf: AirflowConfigParser
secrets_backend_list: list
