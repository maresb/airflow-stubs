import airflow.utils.log.logging_mixin
import airflow.utils.mixins
import dataclasses
import jinja2
from airflow.utils.helpers import render_template_as_native as render_template_as_native, render_template_to_string as render_template_to_string
from airflow.utils.log.logging_mixin import LoggingMixin as LoggingMixin
from airflow.utils.mixins import ResolveMixin as ResolveMixin
from airflow.utils.session import provide_session as provide_session
from typing import Any, ClassVar, Iterable

TYPE_CHECKING: bool
NEW_SESSION: None

class LiteralValue(airflow.utils.mixins.ResolveMixin):
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __dataclass_fields__: ClassVar[dict] = ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context) -> Any: ...
    def __init__(self, value: Any) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __setattr__(self, name, value): ...
    def __delattr__(self, name): ...
    def __hash__(self) -> int: ...

class Templater(airflow.utils.log.logging_mixin.LoggingMixin):
    def get_template_env(self, dag: DAG | None = ...) -> jinja2.Environment: ...
    def prepare_template(self) -> None: ...
    def resolve_template_files(self) -> None: ...
    def render_template(self, content: Any, context: Context, jinja_env: jinja2.Environment | None = ..., seen_oids: set[int] | None = ...) -> Any: ...
