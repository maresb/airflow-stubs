from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.traces import TRACEPARENT as TRACEPARENT, TRACESTATE as TRACESTATE
from airflow.traces.utils import gen_dag_span_id as gen_dag_span_id, gen_span_id as gen_span_id, gen_trace_id as gen_trace_id, parse_traceparent as parse_traceparent, parse_tracestate as parse_tracestate
from airflow.utils.dates import datetime_to_nano as datetime_to_nano
from airflow.utils.net import get_hostname as get_hostname
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace import Span as Span, Tracer as OpenTelemetryTracer
from opentelemetry.sdk.trace.export import ConsoleSpanExporter
from opentelemetry.sdk.trace.id_generator import IdGenerator
from opentelemetry.trace import SpanContext, Tracer as Tracer

log: Incomplete

class OtelTrace:
    span_exporter: Incomplete
    span_processor: Incomplete
    tag_string: Incomplete
    otel_service: Incomplete
    def __init__(self, span_exporter: ConsoleSpanExporter | OTLPSpanExporter, tag_string: str | None = None) -> None: ...
    def get_tracer(self, component: str, trace_id: int | None = None, span_id: int | None = None) -> OpenTelemetryTracer | Tracer: ...
    def get_current_span(self): ...
    def use_span(self, span: Span): ...
    def start_span(self, span_name: str, component: str | None = None, parent_sc: SpanContext | None = None, span_id: Incomplete | None = None, links: Incomplete | None = None, start_time: Incomplete | None = None): ...
    def start_span_from_dagrun(self, dagrun, span_name: str | None = None, component: str = 'dagrun', links: Incomplete | None = None): ...
    def start_span_from_taskinstance(self, ti, span_name: str | None = None, component: str = 'taskinstance', child: bool = False, links: Incomplete | None = None): ...

def gen_context(trace_id: int, span_id: int): ...
def gen_links_from_kv_list(kv_list): ...
def gen_link_from_traceparent(traceparent: str): ...
def get_otel_tracer(cls) -> OtelTrace: ...

class AirflowOtelIdGenerator(IdGenerator):
    span_id: Incomplete
    trace_id: Incomplete
    def __init__(self, span_id: Incomplete | None = None, trace_id: Incomplete | None = None) -> None: ...
    def generate_span_id(self) -> int: ...
    def generate_trace_id(self) -> int: ...
