from _typeshed import Incomplete
from airflow.configuration import conf as conf
from airflow.typing_compat import Protocol as Protocol
from typing import Any, Callable

log: Incomplete

def gen_context(trace_id, span_id): ...
def gen_links_from_kv_list(list): ...
def span(func): ...

class EmptyContext:
    trace_id: int
    def __init__(self) -> None: ...

class EmptySpan:
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs) -> None: ...
    def __call__(self, obj): ...
    def get_span_context(self): ...
    def set_attribute(self, key, value) -> None: ...
    def set_attributes(self, attributes) -> None: ...
    def is_recording(self): ...
    def add_event(self, name: str, attributes: Any | None = None, timestamp: int | None = None) -> None: ...
    def add_link(self, context: Any, attributes: Any | None = None) -> None: ...
    def end(self, end_time: Incomplete | None = None, *args, **kwargs) -> None: ...

EMPTY_SPAN: Incomplete
EMPTY_CTX: Incomplete

class Tracer(Protocol):
    instance: Tracer | EmptyTrace | None
    @classmethod
    def get_tracer(cls, component): ...
    @classmethod
    def start_span(cls, span_name: str, component: str | None = None, parent_sc: Incomplete | None = None, span_id: Incomplete | None = None, links: Incomplete | None = None, start_time: Incomplete | None = None): ...
    @classmethod
    def use_span(cls, span): ...
    @classmethod
    def get_current_span(self): ...
    @classmethod
    def start_span_from_dagrun(cls, dagrun, span_name: Incomplete | None = None, service_name: Incomplete | None = None, component: Incomplete | None = None, links: Incomplete | None = None): ...
    @classmethod
    def start_span_from_taskinstance(cls, ti, span_name: Incomplete | None = None, component: Incomplete | None = None, child: bool = False, links: Incomplete | None = None): ...

class EmptyTrace:
    @classmethod
    def get_tracer(cls, component: str, trace_id: int | None = None, span_id: int | None = None): ...
    @classmethod
    def start_span(cls, span_name: str, component: str | None = None, parent_sc: Incomplete | None = None, span_id: Incomplete | None = None, links: Incomplete | None = None, start_time: Incomplete | None = None) -> EmptySpan: ...
    @classmethod
    def use_span(cls, span) -> EmptySpan: ...
    @classmethod
    def get_current_span(self) -> EmptySpan: ...
    @classmethod
    def start_span_from_dagrun(cls, dagrun, span_name: Incomplete | None = None, service_name: Incomplete | None = None, component: Incomplete | None = None, links: Incomplete | None = None) -> EmptySpan: ...
    @classmethod
    def start_span_from_taskinstance(cls, ti, span_name: Incomplete | None = None, component: Incomplete | None = None, child: bool = False, links: Incomplete | None = None) -> EmptySpan: ...

class _Trace(type):
    factory: Callable
    instance: Tracer | EmptyTrace | None
    def __getattr__(cls, name: str) -> str: ...
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def get_constant_tags(cls) -> str | None: ...

Trace: EmptyTrace
