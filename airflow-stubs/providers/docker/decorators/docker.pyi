import airflow.decorators.base
import airflow.providers.docker.operators.docker
from airflow.decorators.base import DecoratedOperator as DecoratedOperator, task_decorator_factory as task_decorator_factory
from airflow.providers.docker.operators.docker import DockerOperator as DockerOperator
from airflow.utils.python_virtualenv import write_python_script as write_python_script
from typing import Callable, ClassVar

TYPE_CHECKING: bool

class _DockerDecoratedOperator(airflow.decorators.base.DecoratedOperator, airflow.providers.docker.operators.docker.DockerOperator):
    custom_operator_name: ClassVar[str] = ...
    template_fields: ClassVar[tuple] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def generate_command(self): ...
    def execute(self, context: Context): ...
    @property
    def pickling_library(self): ...
def docker_task(python_callable: Callable | None = ..., multiple_outputs: bool | None = ..., **kwargs) -> TaskDecorator: ...
